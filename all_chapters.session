let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
imap <S-Tab> <Plug>snipMateBack
inoremap <silent> <Plug>snipMateShow =snipMate#ShowAvailableSnips()
inoremap <silent> <Plug>snipMateBack =snipMate#BackwardsSnippet()
inoremap <silent> <Plug>snipMateTrigger =snipMate#TriggerSnippet(1)
inoremap <silent> <Plug>snipMateNextOrTrigger =snipMate#TriggerSnippet()
inoremap <silent> <Plug>NERDCommenterInsert  <BS>:call NERDComment('i', "insert")
inoremap <Nul> 
nnoremap  
xmap 	 <Plug>snipMateVisual
smap 	 <Plug>snipMateNextOrTrigger
nnoremap <NL> <NL>
nnoremap  
nnoremap  
nnoremap  :set invnumber
xnoremap <silent>  :call multiple_cursors#new("v")
nnoremap <silent>  :call multiple_cursors#new("n")
nnoremap <silent>  :update
vnoremap <silent>  :update
onoremap <silent>  :update
nmap   <Plug>RDSendLine
vmap   <Plug>RDSendSelection
nmap ,r<Right> :call RSendPartOfLine("right", 0)
nmap ,r<Left> :call RSendPartOfLine("left", 0)
nmap \ca <Plug>NERDCommenterAltDelims
xmap \cu <Plug>NERDCommenterUncomment
nmap \cu <Plug>NERDCommenterUncomment
xmap \cb <Plug>NERDCommenterAlignBoth
nmap \cb <Plug>NERDCommenterAlignBoth
xmap \cl <Plug>NERDCommenterAlignLeft
nmap \cl <Plug>NERDCommenterAlignLeft
nmap \cA <Plug>NERDCommenterAppend
xmap \cy <Plug>NERDCommenterYank
nmap \cy <Plug>NERDCommenterYank
xmap \cs <Plug>NERDCommenterSexy
nmap \cs <Plug>NERDCommenterSexy
xmap \ci <Plug>NERDCommenterInvert
nmap \ci <Plug>NERDCommenterInvert
nmap \c$ <Plug>NERDCommenterToEOL
xmap \cn <Plug>NERDCommenterNested
nmap \cn <Plug>NERDCommenterNested
xmap \cm <Plug>NERDCommenterMinimal
nmap \cm <Plug>NERDCommenterMinimal
xmap \c  <Plug>NERDCommenterToggle
nmap \c  <Plug>NERDCommenterToggle
xmap \cc <Plug>NERDCommenterComment
nmap \cc <Plug>NERDCommenterComment
nnoremap \{{ :vimgrep /{\w\+}}/ %:copen
map \q {!}fmt -w 105}
nnoremap \k :! Rscript -e "library(knitr);knit(input='%', output='%:r.md');"
nmap gx <Plug>NetrwBrowseX
smap <S-Tab> <Plug>snipMateBack
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)
snoremap <silent> <Plug>snipMateBack a=snipMate#BackwardsSnippet()
snoremap <silent> <Plug>snipMateNextOrTrigger a=snipMate#TriggerSnippet()
xnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment("x", "Uncomment")
nnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment("n", "Uncomment")
xnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment("x", "AlignBoth")
nnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment("n", "AlignBoth")
xnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment("x", "AlignLeft")
nnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment("n", "AlignLeft")
nnoremap <silent> <Plug>NERDCommenterAppend :call NERDComment("n", "Append")
xnoremap <silent> <Plug>NERDCommenterYank :call NERDComment("x", "Yank")
nnoremap <silent> <Plug>NERDCommenterYank :call NERDComment("n", "Yank")
xnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment("x", "Sexy")
nnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment("n", "Sexy")
xnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment("x", "Invert")
nnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment("n", "Invert")
nnoremap <silent> <Plug>NERDCommenterToEOL :call NERDComment("n", "ToEOL")
xnoremap <silent> <Plug>NERDCommenterNested :call NERDComment("x", "Nested")
nnoremap <silent> <Plug>NERDCommenterNested :call NERDComment("n", "Nested")
xnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment("x", "Minimal")
nnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment("n", "Minimal")
xnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment("x", "Toggle")
nnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment("n", "Toggle")
xnoremap <silent> <Plug>NERDCommenterComment :call NERDComment("x", "Comment")
nnoremap <silent> <Plug>NERDCommenterComment :call NERDComment("n", "Comment")
map <Down> gj
map <Up> gk
imap 	 <Plug>snipMateNextOrTrigger
imap 	 <Plug>snipMateShow
inoremap <silent>  :update
inoremap AA A
inoremap II I
inoremap OO O
let &cpo=s:cpo_save
unlet s:cpo_save
set background=dark
set backspace=indent,eol,start
set breakat=\ \	!@-+;:,./?
set display=lastline
set expandtab
set fileencodings=ucs-bom,utf-8,default,latin1
set grepprg=grep\ -nH\ $*
set helplang=en
set hlsearch
set iminsert=0
set imsearch=0
set incsearch
set nojoinspaces
set laststatus=2
set listchars=tab:â–·â‹…,trail:â‹…,nbsp:â‹…
set omnifunc=pandoc#completion#Complete
set printoptions=paper:a4
set ruler
set runtimepath=~/.vim,~/.vim/bundle/Screen-vim---gnu-screentmux,~/.vim/bundle/Vim-R-plugin,~/.vim/bundle/Vundle.vim,~/.vim/bundle/jellybeans.vim,~/.vim/bundle/lightline.vim,~/.vim/bundle/nerdcommenter,~/.vim/bundle/nerdtree,~/.vim/bundle/tlib_vim,~/.vim/bundle/vim-addon-mw-utils,~/.vim/bundle/vim-colors-pencil,~/.vim/bundle/vim-colors-solarized,~/.vim/bundle/vim-fugitive,~/.vim/bundle/vim-multiple-cursors,~/.vim/bundle/vim-pandoc,~/.vim/bundle/vim-pandoc-syntax,~/.vim/bundle/vim-pencil,~/.vim/bundle/vim-snipmate,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,~/.vim/bundle/vim-snipmate/after,~/.vim/after,~/.vim/bundle/Vundle.vim/after,~/.vim/bundle/vim-pandoc/after,~/.vim/bundle/vim-pandoc-syntax/after,~/.vim/bundle/vim-multiple-cursors/after,~/.vim/bundle/vim-pencil/after,~/.vim/bundle/nerdcommenter/after,~/.vim/bundle/vim-fugitive/after,~/.vim/bundle/nerdtree/after,~/.vim/bundle/vim-colors-solarized/after,~/.vim/bundle/jellybeans.vim/after,~/.vim/bundle/lightline.vim/after,~/.vim/bundle/Vim-R-plugin/after,~/.vim/bundle/Screen-vim---gnu-screentmux/after,~/.vim/bundle/vim-addon-mw-utils/after,~/.vim/bundle/tlib_vim/after
set shiftwidth=4
set showcmd
set statusline=WC:%{WordCount()}\ [FILE:%F%m%r%h%w]\ [TYPE=%Y\ %{&ff}]\ \ [%l/%L\ (%p%%)][GIT:%{fugitive#statusline()}]
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
set tabline=%!lightline#tabline()
set tabstop=4
set window=46
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +30 Documents/data_intensive/book/ch8_conclusion/ch8_conclusion.rmd
badd +1 Documents/data_intensive/book/ch0_introduction/ch0_introduction.rmd
badd +3 Documents/data_intensive/book/ch1_learning/ch1_praxis.rmd
badd +74 Documents/data_intensive/book/ch2_curves/ch2_curves_function.rmd
badd +2 Documents/data_intensive/book/ch3_dimensionality/ch3_dimensional_exuberance.rmd
badd +53 Documents/data_intensive/book/ch4_probability/ch_naive_informed.rmd
badd +19 \[Vundle]\ Installer
badd +1 /tmp/v0Dsjmf/67
badd +1 Documents/data_intensive/book/ch5_topologies/ch_genomic_topologies.rmd
badd +1 Documents/data_intensive/book/ch6_reconstruction/ch_reconstruction_number.rmd
badd +0 Documents/data_intensive/book/ch7_subjects/ch_learning_subjects.rmd
silent! argdel *
edit Documents/data_intensive/book/ch0_introduction/ch0_introduction.rmd
set splitbelow splitright
wincmd _ | wincmd |
vsplit
wincmd _ | wincmd |
vsplit
2wincmd h
wincmd _ | wincmd |
split
wincmd _ | wincmd |
split
2wincmd k
wincmd w
wincmd w
wincmd w
wincmd _ | wincmd |
split
1wincmd k
wincmd w
wincmd w
wincmd _ | wincmd |
split
1wincmd k
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd w
wincmd w
set nosplitbelow
set nosplitright
wincmd t
set winheight=1 winwidth=1
exe '1resize ' . ((&lines * 14 + 23) / 47)
exe 'vert 1resize ' . ((&columns * 48 + 97) / 194)
exe '2resize ' . ((&lines * 14 + 23) / 47)
exe 'vert 2resize ' . ((&columns * 48 + 97) / 194)
exe '3resize ' . ((&lines * 15 + 23) / 47)
exe 'vert 3resize ' . ((&columns * 48 + 97) / 194)
exe '4resize ' . ((&lines * 22 + 23) / 47)
exe 'vert 4resize ' . ((&columns * 48 + 97) / 194)
exe '5resize ' . ((&lines * 22 + 23) / 47)
exe 'vert 5resize ' . ((&columns * 48 + 97) / 194)
exe '6resize ' . ((&lines * 14 + 23) / 47)
exe 'vert 6resize ' . ((&columns * 48 + 97) / 194)
exe '7resize ' . ((&lines * 14 + 23) / 47)
exe 'vert 7resize ' . ((&columns * 47 + 97) / 194)
exe '8resize ' . ((&lines * 30 + 23) / 47)
exe 'vert 8resize ' . ((&columns * 96 + 97) / 194)
argglobal
nnoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")
nnoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()
nnoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")
nnoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")
nnoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")
nnoremap <buffer> <silent> ,kn :call RKnit()
nnoremap <buffer> <silent> ,rd :call RSetWD()
nnoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)
nnoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)
nnoremap <buffer> <silent> ,ro :call RObjBrowser()
nnoremap <buffer> <silent> ,rb :call RAction("plotsumm")
nnoremap <buffer> <silent> ,rg :call RAction("plot")
nnoremap <buffer> <silent> ,rs :call RAction("summary")
nnoremap <buffer> <silent> ,rh :call RAction("help")
nnoremap <buffer> <silent> ,re :call RAction("example")
nnoremap <buffer> <silent> ,ra :call RAction("args")
nnoremap <buffer> <silent> ,rt :call RAction("str")
nnoremap <buffer> <silent> ,rn :call RAction("vim.names")
nnoremap <buffer> <silent> ,rp :call RAction("print")
nnoremap <buffer> <silent> ,rm :call RClearAll()
nnoremap <buffer> <silent> ,rr :call RClearConsole()
nnoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")
nnoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")
nnoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")
nnoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")
nnoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")
nnoremap <buffer> <silent> ,; :call MovePosRCodeComment("normal")
nnoremap <buffer> <silent> ,xu :call RSimpleCommentLine("normal", "u")
nnoremap <buffer> <silent> ,xc :call RSimpleCommentLine("normal", "c")
nnoremap <buffer> <silent> ,xx :call RComment("normal")
nnoremap <buffer> <silent> ,rw :call RQuit('save')
nnoremap <buffer> <silent> ,rq :call RQuit('nosave')
nnoremap <buffer> <silent> ,rc :call StartR("custom")
nnoremap <buffer> <silent> ,rv :call StartR("vanilla")
nnoremap <buffer> <silent> ,rf :call StartR("R")
vnoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")
vnoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()
vnoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")
vnoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")
vnoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")
vnoremap <buffer> <silent> ,kn :call RKnit()
vnoremap <buffer> <silent> ,rd :call RSetWD()
vnoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)
vnoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)
vnoremap <buffer> <silent> ,ro :call RObjBrowser()
vnoremap <buffer> <silent> ,rb :call RAction("plotsumm")
vnoremap <buffer> <silent> ,rg :call RAction("plot")
vnoremap <buffer> <silent> ,rs :call RAction("summary")
vnoremap <buffer> <silent> ,rh :call RAction("help")
vnoremap <buffer> <silent> ,re :call RAction("example")
vnoremap <buffer> <silent> ,ra :call RAction("args")
vnoremap <buffer> <silent> ,rt :call RAction("str")
vnoremap <buffer> <silent> ,rn :call RAction("vim.names")
vnoremap <buffer> <silent> ,rp :call RAction("print")
vnoremap <buffer> <silent> ,rm :call RClearAll()
vnoremap <buffer> <silent> ,rr :call RClearConsole()
vnoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")
vnoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")
vnoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")
vnoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")
vnoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")
vnoremap <buffer> <silent> ,; :call MovePosRCodeComment("selection")
vnoremap <buffer> <silent> ,xu :call RSimpleCommentLine("selection", "u")
vnoremap <buffer> <silent> ,xc :call RSimpleCommentLine("selection", "c")
vnoremap <buffer> <silent> ,xx :call RComment("selection")
vnoremap <buffer> <silent> ,rw :call RQuit('save')
vnoremap <buffer> <silent> ,rq :call RQuit('nosave')
vnoremap <buffer> <silent> ,rc :call StartR("custom")
vnoremap <buffer> <silent> ,rv :call StartR("vanilla")
vnoremap <buffer> <silent> ,rf :call StartR("R")
onoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")
onoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()
onoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")
onoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")
onoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")
onoremap <buffer> <silent> ,kn :call RKnit()
onoremap <buffer> <silent> ,rd :call RSetWD()
onoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)
onoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)
onoremap <buffer> <silent> ,ro :call RObjBrowser()
onoremap <buffer> <silent> ,rb :call RAction("plotsumm")
onoremap <buffer> <silent> ,rg :call RAction("plot")
onoremap <buffer> <silent> ,rs :call RAction("summary")
onoremap <buffer> <silent> ,rh :call RAction("help")
onoremap <buffer> <silent> ,re :call RAction("example")
onoremap <buffer> <silent> ,ra :call RAction("args")
onoremap <buffer> <silent> ,rt :call RAction("str")
onoremap <buffer> <silent> ,rn :call RAction("vim.names")
onoremap <buffer> <silent> ,rp :call RAction("print")
onoremap <buffer> <silent> ,rm :call RClearAll()
onoremap <buffer> <silent> ,rr :call RClearConsole()
onoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")
onoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")
onoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")
onoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")
onoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")
onoremap <buffer> <silent> ,; :call MovePosRCodeComment("normal")
onoremap <buffer> <silent> ,xu :call RSimpleCommentLine("normal", "u")
onoremap <buffer> <silent> ,xc :call RSimpleCommentLine("normal", "c")
onoremap <buffer> <silent> ,xx :call RComment("normal")
onoremap <buffer> <silent> ,rw :call RQuit('save')
onoremap <buffer> <silent> ,rq :call RQuit('nosave')
onoremap <buffer> <silent> ,rc :call StartR("custom")
onoremap <buffer> <silent> ,rv :call StartR("vanilla")
onoremap <buffer> <silent> ,rf :call StartR("R")
noremap <buffer> <silent> ,ca :call b:SendChunkToR("echo", "down")
noremap <buffer> <silent> ,cd :call b:SendChunkToR("silent", "down")
noremap <buffer> <silent> ,ce :call b:SendChunkToR("echo", "stay")
noremap <buffer> <silent> ,cc :call b:SendChunkToR("silent", "stay")
noremap <buffer> <silent> ,o :call SendLineToRAndInsertOutput()0
noremap <buffer> <silent> ,l :call SendLineToR("stay")
noremap <buffer> <silent> ,ch :call SendFHChunkToR()
noremap <buffer> <silent> ,pa :call SendParagraphToR("echo", "down")
noremap <buffer> <silent> ,pd :call SendParagraphToR("silent", "down")
noremap <buffer> <silent> ,pe :call SendParagraphToR("echo", "stay")
noremap <buffer> <silent> ,pp :call SendParagraphToR("silent", "stay")
vnoremap <buffer> <silent> ,sa :call SendSelectionToR("echo", "down")
vnoremap <buffer> <silent> ,se :call SendSelectionToR("echo", "stay")
vnoremap <buffer> <silent> ,ss :call SendSelectionToR("silent", "stay")
noremap <buffer> <silent> ,ba :call SendMBlockToR("echo", "down")
noremap <buffer> <silent> ,bd :call SendMBlockToR("silent", "down")
noremap <buffer> <silent> ,be :call SendMBlockToR("echo", "stay")
noremap <buffer> <silent> ,bb :call SendMBlockToR("silent", "stay")
let s:cpo_save=&cpo
set cpo&vim
nmap <buffer> ,xi <Plug>(pandoc-hypertext-goto-id)
nmap <buffer> ,nr <Plug>(pandoc-keyboard-ref-insert)
vmap <buffer> ,_ <Plug>(pandoc-keyboard-toggle-subscript)
nmap <buffer> ,_ <Plug>(pandoc-keyboard-toggle-subscript)
vmap <buffer> ,^ <Plug>(pandoc-keyboard-toggle-superscript)
nmap <buffer> ,^ <Plug>(pandoc-keyboard-toggle-superscript)
vmap <buffer> ,~~ <Plug>(pandoc-keyboard-toggle-strikeout)
nmap <buffer> ,~~ <Plug>(pandoc-keyboard-toggle-strikeout)
vmap <buffer> ,' <Plug>(pandoc-keyboard-toggle-verbatim)
nmap <buffer> ,' <Plug>(pandoc-keyboard-toggle-verbatim)
vmap <buffer> ,b <Plug>(pandoc-keyboard-toggle-strong)
nmap <buffer> ,b <Plug>(pandoc-keyboard-toggle-strong)
vmap <buffer> ,i <Plug>(pandoc-keyboard-toggle-emphasis)
nmap <buffer> ,i <Plug>(pandoc-keyboard-toggle-emphasis)
nmap <buffer> ,hcn <Plug>(pandoc-keyboard-nth-header-child)
nmap <buffer> ,hcl <Plug>(pandoc-keyboard-last-header-child)
nmap <buffer> ,hcf <Plug>(pandoc-keyboard-first-header-child)
nmap <buffer> ,hsb <Plug>(pandoc-keyboard-prev-header-sibling)
nmap <buffer> ,hsn <Plug>(pandoc-keyboard-next-header-sibling)
nmap <buffer> ,hp <Plug>(pandoc-keyboard-cur-header-parent)
nmap <buffer> ,hh <Plug>(pandoc-keyboard-cur-header)
nmap <buffer> ,hb <Plug>(pandoc-keyboard-prev-header)
nmap <buffer> ,hn <Plug>(pandoc-keyboard-next-header)
nmap <buffer> ,hd <Plug>(pandoc-keyboard-remove-header)
nmap <buffer> ,# <Plug>(pandoc-keyboard-apply-header)
nmap <buffer> ,lcn <Plug>(pandoc-keyboard-nth-li-child)
nmap <buffer> ,lcl <Plug>(pandoc-keyboard-last-li-child)
nmap <buffer> ,lcf <Plug>(pandoc-keyboard-first-li-child)
nmap <buffer> ,lsp <Plug>(pandoc-keyboard-prev-li-sibling)
nmap <buffer> ,lsn <Plug>(pandoc-keyboard-next-li-sibling)
nmap <buffer> ,llp <Plug>(pandoc-keyboard-cur-li-parent)
nmap <buffer> ,ll <Plug>(pandoc-keyboard-cur-li)
nmap <buffer> ,lp <Plug>(pandoc-keyboard-prev-li)
nmap <buffer> ,ln <Plug>(pandoc-keyboard-next-li)
nmap <buffer> [] <Plug>(pandoc-keyboard-rw-sect-end)
nmap <buffer> [[ <Plug>(pandoc-keyboard-rw-header)
nmap <buffer> ][ <Plug>(pandoc-keyboard-ff-sect-end)
nmap <buffer> ]] <Plug>(pandoc-keyboard-ff-header)
omap <buffer> apt :normal vapl
vmap <buffer> <silent> apt <Plug>(pandoc-keyboard-select-subscript-inclusive)
omap <buffer> apu :normal vapu
vmap <buffer> <silent> apu <Plug>(pandoc-keyboard-select-superscript-inclusive)
omap <buffer> apk :normal vapk
vmap <buffer> <silent> apk <Plug>(pandoc-keyboard-select-strikeout-inclusive)
omap <buffer> apv :normal vapv
vmap <buffer> <silent> apv <Plug>(pandoc-keyboard-select-verbatim-inclusive)
omap <buffer> aps :normal vaps
vmap <buffer> <silent> aps <Plug>(pandoc-keyboard-select-strong-inclusive)
omap <buffer> ape :normal vape
vmap <buffer> <silent> ape <Plug>(pandoc-keyboard-select-emphasis-inclusive)
omap <buffer> aS :normal VaS
vmap <buffer> aS <Plug>(pandoc-keyboard-select-section-inclusive)
nmap <buffer> <silent> gN :call b:PreviousRChunk()
nmap <buffer> <silent> gn :call b:NextRChunk()
nmap <buffer> gx <Plug>(pandoc-hypertext-open-system)
nmap <buffer> gf <Plug>(pandoc-hypertext-open-local)
omap <buffer> ipt :normal vipl
vmap <buffer> <silent> ipt <Plug>(pandoc-keyboard-select-subscript-exclusive)
omap <buffer> ipu :normal vipu
vmap <buffer> <silent> ipu <Plug>(pandoc-keyboard-select-superscript-exclusive)
omap <buffer> ipk :normal vipk
vmap <buffer> <silent> ipk <Plug>(pandoc-keyboard-select-strikeout-exclusive)
omap <buffer> ipv :normal vipv
vmap <buffer> <silent> ipv <Plug>(pandoc-keyboard-select-verbatim-exclusive)
omap <buffer> ips :normal vips
vmap <buffer> <silent> ips <Plug>(pandoc-keyboard-select-strong-exclusive)
omap <buffer> ipe :normal vipe
vmap <buffer> <silent> ipe <Plug>(pandoc-keyboard-select-emphasis-exclusive)
omap <buffer> iS :normal ViS
vmap <buffer> iS <Plug>(pandoc-keyboard-select-section-exclusive)
vnoremap <buffer> j gj
nnoremap <buffer> j gj
vnoremap <buffer> k gk
nnoremap <buffer> k gk
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-subscript) :set opfunc=pandoc#keyboard#styles#ToggleSubscriptg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-superscript) :set opfunc=pandoc#keyboard#styles#ToggleSuperscriptg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strikeout) :set opfunc=pandoc#keyboard#styles#ToggleStrikeoutg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-verbatim) :set opfunc=pandoc#keyboard#styles#ToggleVerbatimg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strong) :set opfunc=pandoc#keyboard#styles#ToggleStrongg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-emphasis) :set opfunc=pandoc#keyboard#styles#ToggleEmphasisg@
noremap <buffer> <silent> <Plug>RDSendLine :call SendLineToR("down")0
vnoremap <buffer> <silent> <Plug>RDSendSelection :call SendSelectionToR("silent", "down")
nnoremap <buffer> <silent> <Plug>(pandoc-hypertext-goto-id) :call pandoc#hypertext#GotoID()
nnoremap <buffer> <silent> <Plug>(pandoc-hypertext-open-system) :call pandoc#hypertext#OpenSystem()
nnoremap <buffer> <silent> <Plug>(pandoc-hypertext-open-local) :call pandoc#hypertext#OpenLocal()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ref-backfrom) :call pandoc#keyboard#references#BACKFROM_Ref()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ref-goto) :call pandoc#keyboard#references#GOTO_Ref()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ref-insert) :call pandoc#keyboard#references#Insert_Ref()a
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-subscript-exclusive) :call pandoc#keyboard#styles#SelectSubscript("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-subscript-inclusive) :call pandoc#keyboard#styles#SelectSubscript("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-subscript) :call pandoc#keyboard#styles#ToggleSubscript(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-subscript) :set opfunc=pandoc#keyboard#styles#ToggleSubscriptg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-superscript-exclusive) :call pandoc#keyboard#styles#SelectSuperscript("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-superscript-inclusive) :call pandoc#keyboard#styles#SelectSuperscript("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-superscript) :call pandoc#keyboard#styles#ToggleSuperscript(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-superscript) :set opfunc=pandoc#keyboard#styles#ToggleSuperscriptg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strikeout-exclusive) :call pandoc#keyboard#styles#SelectStrikeout("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strikeout-inclusive) :call pandoc#keyboard#styles#SelectStrikeout("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strikeout) :call pandoc#keyboard#styles#ToggleStrikeout(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strikeout) :set opfunc=pandoc#keyboard#styles#ToggleStrikeoutg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-verbatim-exclusive) :call pandoc#keyboard#styles#SelectVerbatim("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-verbatim-inclusive) :call pandoc#keyboard#styles#SelectVerbatim("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-verbatim) :call pandoc#keyboard#styles#ToggleVerbatim(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-verbatim) :set opfunc=pandoc#keyboard#styles#ToggleVerbatimg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strong-exclusive) :call pandoc#keyboard#styles#SelectStrong("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strong-inclusive) :call pandoc#keyboard#styles#SelectStrong("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strong) :call pandoc#keyboard#styles#ToggleStrong(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strong) :set opfunc=pandoc#keyboard#styles#ToggleStrongg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-emphasis-exclusive) :call pandoc#keyboard#styles#SelectEmphasis("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-emphasis-inclusive) :call pandoc#keyboard#styles#SelectEmphasis("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-emphasis) :call pandoc#keyboard#styles#ToggleEmphasis(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-emphasis) :set opfunc=pandoc#keyboard#styles#ToggleEmphasisg@
noremap <buffer> <silent> <Plug>(pandoc-keyboard-nth-header-child) :call pandoc#keyboard#sections#GotoNthChildHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-last-header-child) :call pandoc#keyboard#sections#LastChildHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-first-header-child) :call pandoc#keyboard#sections#FirstChildHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-header-sibling) :call pandoc#keyboard#sections#PrevSiblingHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-header-sibling) :call pandoc#keyboard#sections#NextSiblingHeader()
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-section-exclusive) :call pandoc#keyboard#sections#SelectSection('exclusive')
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-section-inclusive) :call pandoc#keyboard#sections#SelectSection('inclusive')
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-header-parent) :call pandoc#keyboard#sections#CurrentHeaderParent()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-header) :call pandoc#keyboard#sections#CurrentHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-rw-sect-end) :call pandoc#keyboard#sections#PrevSectionEnd(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ff-sect-end) :call pandoc#keyboard#sections#NextSectionEnd(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-rw-header) :call pandoc#keyboard#sections#BackwardHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ff-header) :call pandoc#keyboard#sections#ForwardHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-header) :call pandoc#keyboard#sections#PrevHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-header) :call pandoc#keyboard#sections#NextHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-remove-header) :call pandoc#keyboard#sections#RemoveHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-apply-header) :call pandoc#keyboard#sections#ApplyHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-nth-li-child) :call pandoc#keyboard#lists#GotoNthListItemChild(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-last-li-child) :call pandoc#keyboard#lists#LastListItemChild()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-first-li-child) :call pandoc#keyboard#lists#FirstListItemChild()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-li-sibling) :call pandoc#keyboard#lists#PrevListItemSibling()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-li-sibling) :call pandoc#keyboard#lists#NextListItemSibling()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-li-parent) :call pandoc#keyboard#lists#CurrentListItemParent()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-li) :call pandoc#keyboard#lists#CurrentListItem()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-li) :call pandoc#keyboard#lists#PrevListItem()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-li) :call pandoc#keyboard#lists#NextListItem()
imap <buffer> <silent>  =RCompleteArgs()
inoremap <buffer> <silent> ,ca :call b:SendChunkToR("echo", "down")a
inoremap <buffer> <silent> ,cd :call b:SendChunkToR("silent", "down")a
inoremap <buffer> <silent> ,ce :call b:SendChunkToR("echo", "stay")a
inoremap <buffer> <silent> ,cc :call b:SendChunkToR("silent", "stay")a
inoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")a
inoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()a
inoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")a
inoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")a
inoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")a
inoremap <buffer> <silent> ,kn :call RKnit()a
inoremap <buffer> <silent> ,rd :call RSetWD()a
inoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)a
inoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)a
inoremap <buffer> <silent> ,ro :call RObjBrowser()a
inoremap <buffer> <silent> ,rb :call RAction("plotsumm")a
inoremap <buffer> <silent> ,rg :call RAction("plot")a
inoremap <buffer> <silent> ,rs :call RAction("summary")a
inoremap <buffer> <silent> ,rh :call RAction("help")a
inoremap <buffer> <silent> ,re :call RAction("example")a
inoremap <buffer> <silent> ,ra :call RAction("args")a
inoremap <buffer> <silent> ,rt :call RAction("str")a
inoremap <buffer> <silent> ,rn :call RAction("vim.names")a
inoremap <buffer> <silent> ,rp :call RAction("print")a
inoremap <buffer> <silent> ,rm :call RClearAll()a
inoremap <buffer> <silent> ,rr :call RClearConsole()a
inoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")a
imap <buffer> <silent> ,r<Right> l:call RSendPartOfLine("right", 0)i
imap <buffer> <silent> ,r<Left> l:call RSendPartOfLine("left", 0)i
inoremap <buffer> <silent> ,q :call SendLineToR("newline")a
inoremap <buffer> <silent> ,o :call SendLineToRAndInsertOutput()0i
inoremap <buffer> <silent> ,d :call SendLineToR("down")0i
inoremap <buffer> <silent> ,l :call SendLineToR("stay")a
inoremap <buffer> <silent> ,ch :call SendFHChunkToR()a
inoremap <buffer> <silent> ,pa :call SendParagraphToR("echo", "down")a
inoremap <buffer> <silent> ,pd :call SendParagraphToR("silent", "down")a
inoremap <buffer> <silent> ,pe :call SendParagraphToR("echo", "stay")a
inoremap <buffer> <silent> ,pp :call SendParagraphToR("silent", "stay")a
inoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")a
inoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")a
inoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")a
inoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")a
inoremap <buffer> <silent> ,ba :call SendMBlockToR("echo", "down")a
inoremap <buffer> <silent> ,bd :call SendMBlockToR("silent", "down")a
inoremap <buffer> <silent> ,be :call SendMBlockToR("echo", "stay")a
inoremap <buffer> <silent> ,bb :call SendMBlockToR("silent", "stay")a
inoremap <buffer> <silent> ,; :call MovePosRCodeComment("normal")a
inoremap <buffer> <silent> ,xu :call RSimpleCommentLine("normal", "u")a
inoremap <buffer> <silent> ,xc :call RSimpleCommentLine("normal", "c")a
inoremap <buffer> <silent> ,xx :call RComment("normal")a
inoremap <buffer> <silent> ,rw :call RQuit('save')a
inoremap <buffer> <silent> ,rq :call RQuit('nosave')a
inoremap <buffer> <silent> ,rc :call StartR("custom")a
inoremap <buffer> <silent> ,rv :call StartR("vanilla")a
inoremap <buffer> <silent> ,rf :call StartR("R")a
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=2
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=pandoc\ -t\ markdown\ --reference-links\ --no-wrap
setlocal errorformat=
setlocal expandtab
if &filetype != 'pandoc'
setlocal filetype=pandoc
endif
set foldcolumn=6
setlocal foldcolumn=3
setlocal foldenable
setlocal foldexpr=pandoc#folding#FoldExpr()
setlocal foldignore=#
setlocal foldlevel=1
setlocal foldmarker={{{,}}}
set foldmethod=marker
setlocal foldmethod=expr
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=pandoc#folding#FoldText()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetRmdIndent()
setlocal indentkeys=0{,0},:,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=48-57,a-z,A-Z,192-255
setlocal keywordprg=
setlocal linebreak
setlocal nolisp
set list
setlocal list
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=pandoc#completion#Complete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal spell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%{lightline#link()}%#LightLineLeft_inactive_0#%(\ %t\ %)%#LightLineLeft_inactive_0_1#â–¶%#LightLineMiddle_inactive#%=%#LightLineRight_inactive_1_2#â–¶%#LightLineRight_inactive_1#%(\ %3p%%\ %)%#LightLineRight_inactive_0_1#â–¶%#LightLineRight_inactive_0#%(\ %3l:%-2v\ %)
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'pandoc'
setlocal syntax=pandoc
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
let s:l = 51 - ((50 * winheight(0) + 7) / 14)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
51
normal! 01|
lcd ~/Documents/data_intensive/book/ch0_introduction
wincmd w
argglobal
edit ~/Documents/data_intensive/book/ch1_learning/ch1_praxis.rmd
nnoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")
nnoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()
nnoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")
nnoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")
nnoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")
nnoremap <buffer> <silent> ,kn :call RKnit()
nnoremap <buffer> <silent> ,rd :call RSetWD()
nnoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)
nnoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)
nnoremap <buffer> <silent> ,ro :call RObjBrowser()
nnoremap <buffer> <silent> ,rb :call RAction("plotsumm")
nnoremap <buffer> <silent> ,rg :call RAction("plot")
nnoremap <buffer> <silent> ,rs :call RAction("summary")
nnoremap <buffer> <silent> ,rh :call RAction("help")
nnoremap <buffer> <silent> ,re :call RAction("example")
nnoremap <buffer> <silent> ,ra :call RAction("args")
nnoremap <buffer> <silent> ,rt :call RAction("str")
nnoremap <buffer> <silent> ,rn :call RAction("vim.names")
nnoremap <buffer> <silent> ,rp :call RAction("print")
nnoremap <buffer> <silent> ,rm :call RClearAll()
nnoremap <buffer> <silent> ,rr :call RClearConsole()
nnoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")
nnoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")
nnoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")
nnoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")
nnoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")
nnoremap <buffer> <silent> ,; :call MovePosRCodeComment("normal")
nnoremap <buffer> <silent> ,xu :call RSimpleCommentLine("normal", "u")
nnoremap <buffer> <silent> ,xc :call RSimpleCommentLine("normal", "c")
nnoremap <buffer> <silent> ,xx :call RComment("normal")
nnoremap <buffer> <silent> ,rw :call RQuit('save')
nnoremap <buffer> <silent> ,rq :call RQuit('nosave')
nnoremap <buffer> <silent> ,rc :call StartR("custom")
nnoremap <buffer> <silent> ,rv :call StartR("vanilla")
nnoremap <buffer> <silent> ,rf :call StartR("R")
vnoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")
vnoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()
vnoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")
vnoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")
vnoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")
vnoremap <buffer> <silent> ,kn :call RKnit()
vnoremap <buffer> <silent> ,rd :call RSetWD()
vnoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)
vnoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)
vnoremap <buffer> <silent> ,ro :call RObjBrowser()
vnoremap <buffer> <silent> ,rb :call RAction("plotsumm")
vnoremap <buffer> <silent> ,rg :call RAction("plot")
vnoremap <buffer> <silent> ,rs :call RAction("summary")
vnoremap <buffer> <silent> ,rh :call RAction("help")
vnoremap <buffer> <silent> ,re :call RAction("example")
vnoremap <buffer> <silent> ,ra :call RAction("args")
vnoremap <buffer> <silent> ,rt :call RAction("str")
vnoremap <buffer> <silent> ,rn :call RAction("vim.names")
vnoremap <buffer> <silent> ,rp :call RAction("print")
vnoremap <buffer> <silent> ,rm :call RClearAll()
vnoremap <buffer> <silent> ,rr :call RClearConsole()
vnoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")
vnoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")
vnoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")
vnoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")
vnoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")
vnoremap <buffer> <silent> ,; :call MovePosRCodeComment("selection")
vnoremap <buffer> <silent> ,xu :call RSimpleCommentLine("selection", "u")
vnoremap <buffer> <silent> ,xc :call RSimpleCommentLine("selection", "c")
vnoremap <buffer> <silent> ,xx :call RComment("selection")
vnoremap <buffer> <silent> ,rw :call RQuit('save')
vnoremap <buffer> <silent> ,rq :call RQuit('nosave')
vnoremap <buffer> <silent> ,rc :call StartR("custom")
vnoremap <buffer> <silent> ,rv :call StartR("vanilla")
vnoremap <buffer> <silent> ,rf :call StartR("R")
onoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")
onoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()
onoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")
onoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")
onoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")
onoremap <buffer> <silent> ,kn :call RKnit()
onoremap <buffer> <silent> ,rd :call RSetWD()
onoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)
onoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)
onoremap <buffer> <silent> ,ro :call RObjBrowser()
onoremap <buffer> <silent> ,rb :call RAction("plotsumm")
onoremap <buffer> <silent> ,rg :call RAction("plot")
onoremap <buffer> <silent> ,rs :call RAction("summary")
onoremap <buffer> <silent> ,rh :call RAction("help")
onoremap <buffer> <silent> ,re :call RAction("example")
onoremap <buffer> <silent> ,ra :call RAction("args")
onoremap <buffer> <silent> ,rt :call RAction("str")
onoremap <buffer> <silent> ,rn :call RAction("vim.names")
onoremap <buffer> <silent> ,rp :call RAction("print")
onoremap <buffer> <silent> ,rm :call RClearAll()
onoremap <buffer> <silent> ,rr :call RClearConsole()
onoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")
onoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")
onoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")
onoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")
onoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")
onoremap <buffer> <silent> ,; :call MovePosRCodeComment("normal")
onoremap <buffer> <silent> ,xu :call RSimpleCommentLine("normal", "u")
onoremap <buffer> <silent> ,xc :call RSimpleCommentLine("normal", "c")
onoremap <buffer> <silent> ,xx :call RComment("normal")
onoremap <buffer> <silent> ,rw :call RQuit('save')
onoremap <buffer> <silent> ,rq :call RQuit('nosave')
onoremap <buffer> <silent> ,rc :call StartR("custom")
onoremap <buffer> <silent> ,rv :call StartR("vanilla")
onoremap <buffer> <silent> ,rf :call StartR("R")
noremap <buffer> <silent> ,ca :call b:SendChunkToR("echo", "down")
noremap <buffer> <silent> ,cd :call b:SendChunkToR("silent", "down")
noremap <buffer> <silent> ,ce :call b:SendChunkToR("echo", "stay")
noremap <buffer> <silent> ,cc :call b:SendChunkToR("silent", "stay")
noremap <buffer> <silent> ,o :call SendLineToRAndInsertOutput()0
noremap <buffer> <silent> ,l :call SendLineToR("stay")
noremap <buffer> <silent> ,ch :call SendFHChunkToR()
noremap <buffer> <silent> ,pa :call SendParagraphToR("echo", "down")
noremap <buffer> <silent> ,pd :call SendParagraphToR("silent", "down")
noremap <buffer> <silent> ,pe :call SendParagraphToR("echo", "stay")
noremap <buffer> <silent> ,pp :call SendParagraphToR("silent", "stay")
vnoremap <buffer> <silent> ,sa :call SendSelectionToR("echo", "down")
vnoremap <buffer> <silent> ,se :call SendSelectionToR("echo", "stay")
vnoremap <buffer> <silent> ,ss :call SendSelectionToR("silent", "stay")
noremap <buffer> <silent> ,ba :call SendMBlockToR("echo", "down")
noremap <buffer> <silent> ,bd :call SendMBlockToR("silent", "down")
noremap <buffer> <silent> ,be :call SendMBlockToR("echo", "stay")
noremap <buffer> <silent> ,bb :call SendMBlockToR("silent", "stay")
let s:cpo_save=&cpo
set cpo&vim
nmap <buffer> ,xi <Plug>(pandoc-hypertext-goto-id)
nmap <buffer> ,nr <Plug>(pandoc-keyboard-ref-insert)
vmap <buffer> ,_ <Plug>(pandoc-keyboard-toggle-subscript)
nmap <buffer> ,_ <Plug>(pandoc-keyboard-toggle-subscript)
vmap <buffer> ,^ <Plug>(pandoc-keyboard-toggle-superscript)
nmap <buffer> ,^ <Plug>(pandoc-keyboard-toggle-superscript)
vmap <buffer> ,~~ <Plug>(pandoc-keyboard-toggle-strikeout)
nmap <buffer> ,~~ <Plug>(pandoc-keyboard-toggle-strikeout)
vmap <buffer> ,' <Plug>(pandoc-keyboard-toggle-verbatim)
nmap <buffer> ,' <Plug>(pandoc-keyboard-toggle-verbatim)
vmap <buffer> ,b <Plug>(pandoc-keyboard-toggle-strong)
nmap <buffer> ,b <Plug>(pandoc-keyboard-toggle-strong)
vmap <buffer> ,i <Plug>(pandoc-keyboard-toggle-emphasis)
nmap <buffer> ,i <Plug>(pandoc-keyboard-toggle-emphasis)
nmap <buffer> ,hcn <Plug>(pandoc-keyboard-nth-header-child)
nmap <buffer> ,hcl <Plug>(pandoc-keyboard-last-header-child)
nmap <buffer> ,hcf <Plug>(pandoc-keyboard-first-header-child)
nmap <buffer> ,hsb <Plug>(pandoc-keyboard-prev-header-sibling)
nmap <buffer> ,hsn <Plug>(pandoc-keyboard-next-header-sibling)
nmap <buffer> ,hp <Plug>(pandoc-keyboard-cur-header-parent)
nmap <buffer> ,hh <Plug>(pandoc-keyboard-cur-header)
nmap <buffer> ,hb <Plug>(pandoc-keyboard-prev-header)
nmap <buffer> ,hn <Plug>(pandoc-keyboard-next-header)
nmap <buffer> ,hd <Plug>(pandoc-keyboard-remove-header)
nmap <buffer> ,# <Plug>(pandoc-keyboard-apply-header)
nmap <buffer> ,lcn <Plug>(pandoc-keyboard-nth-li-child)
nmap <buffer> ,lcl <Plug>(pandoc-keyboard-last-li-child)
nmap <buffer> ,lcf <Plug>(pandoc-keyboard-first-li-child)
nmap <buffer> ,lsp <Plug>(pandoc-keyboard-prev-li-sibling)
nmap <buffer> ,lsn <Plug>(pandoc-keyboard-next-li-sibling)
nmap <buffer> ,llp <Plug>(pandoc-keyboard-cur-li-parent)
nmap <buffer> ,ll <Plug>(pandoc-keyboard-cur-li)
nmap <buffer> ,lp <Plug>(pandoc-keyboard-prev-li)
nmap <buffer> ,ln <Plug>(pandoc-keyboard-next-li)
nmap <buffer> [] <Plug>(pandoc-keyboard-rw-sect-end)
nmap <buffer> [[ <Plug>(pandoc-keyboard-rw-header)
nmap <buffer> ][ <Plug>(pandoc-keyboard-ff-sect-end)
nmap <buffer> ]] <Plug>(pandoc-keyboard-ff-header)
omap <buffer> apt :normal vapl
vmap <buffer> <silent> apt <Plug>(pandoc-keyboard-select-subscript-inclusive)
omap <buffer> apu :normal vapu
vmap <buffer> <silent> apu <Plug>(pandoc-keyboard-select-superscript-inclusive)
omap <buffer> apk :normal vapk
vmap <buffer> <silent> apk <Plug>(pandoc-keyboard-select-strikeout-inclusive)
omap <buffer> apv :normal vapv
vmap <buffer> <silent> apv <Plug>(pandoc-keyboard-select-verbatim-inclusive)
omap <buffer> aps :normal vaps
vmap <buffer> <silent> aps <Plug>(pandoc-keyboard-select-strong-inclusive)
omap <buffer> ape :normal vape
vmap <buffer> <silent> ape <Plug>(pandoc-keyboard-select-emphasis-inclusive)
omap <buffer> aS :normal VaS
vmap <buffer> aS <Plug>(pandoc-keyboard-select-section-inclusive)
nmap <buffer> <silent> gN :call b:PreviousRChunk()
nmap <buffer> <silent> gn :call b:NextRChunk()
nmap <buffer> gx <Plug>(pandoc-hypertext-open-system)
nmap <buffer> gf <Plug>(pandoc-hypertext-open-local)
omap <buffer> ipt :normal vipl
vmap <buffer> <silent> ipt <Plug>(pandoc-keyboard-select-subscript-exclusive)
omap <buffer> ipu :normal vipu
vmap <buffer> <silent> ipu <Plug>(pandoc-keyboard-select-superscript-exclusive)
omap <buffer> ipk :normal vipk
vmap <buffer> <silent> ipk <Plug>(pandoc-keyboard-select-strikeout-exclusive)
omap <buffer> ipv :normal vipv
vmap <buffer> <silent> ipv <Plug>(pandoc-keyboard-select-verbatim-exclusive)
omap <buffer> ips :normal vips
vmap <buffer> <silent> ips <Plug>(pandoc-keyboard-select-strong-exclusive)
omap <buffer> ipe :normal vipe
vmap <buffer> <silent> ipe <Plug>(pandoc-keyboard-select-emphasis-exclusive)
omap <buffer> iS :normal ViS
vmap <buffer> iS <Plug>(pandoc-keyboard-select-section-exclusive)
vnoremap <buffer> j gj
nnoremap <buffer> j gj
vnoremap <buffer> k gk
nnoremap <buffer> k gk
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-subscript) :set opfunc=pandoc#keyboard#styles#ToggleSubscriptg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-superscript) :set opfunc=pandoc#keyboard#styles#ToggleSuperscriptg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strikeout) :set opfunc=pandoc#keyboard#styles#ToggleStrikeoutg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-verbatim) :set opfunc=pandoc#keyboard#styles#ToggleVerbatimg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strong) :set opfunc=pandoc#keyboard#styles#ToggleStrongg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-emphasis) :set opfunc=pandoc#keyboard#styles#ToggleEmphasisg@
noremap <buffer> <silent> <Plug>RDSendLine :call SendLineToR("down")0
vnoremap <buffer> <silent> <Plug>RDSendSelection :call SendSelectionToR("silent", "down")
nnoremap <buffer> <silent> <Plug>(pandoc-hypertext-goto-id) :call pandoc#hypertext#GotoID()
nnoremap <buffer> <silent> <Plug>(pandoc-hypertext-open-system) :call pandoc#hypertext#OpenSystem()
nnoremap <buffer> <silent> <Plug>(pandoc-hypertext-open-local) :call pandoc#hypertext#OpenLocal()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ref-backfrom) :call pandoc#keyboard#references#BACKFROM_Ref()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ref-goto) :call pandoc#keyboard#references#GOTO_Ref()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ref-insert) :call pandoc#keyboard#references#Insert_Ref()a
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-subscript-exclusive) :call pandoc#keyboard#styles#SelectSubscript("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-subscript-inclusive) :call pandoc#keyboard#styles#SelectSubscript("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-subscript) :call pandoc#keyboard#styles#ToggleSubscript(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-subscript) :set opfunc=pandoc#keyboard#styles#ToggleSubscriptg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-superscript-exclusive) :call pandoc#keyboard#styles#SelectSuperscript("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-superscript-inclusive) :call pandoc#keyboard#styles#SelectSuperscript("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-superscript) :call pandoc#keyboard#styles#ToggleSuperscript(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-superscript) :set opfunc=pandoc#keyboard#styles#ToggleSuperscriptg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strikeout-exclusive) :call pandoc#keyboard#styles#SelectStrikeout("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strikeout-inclusive) :call pandoc#keyboard#styles#SelectStrikeout("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strikeout) :call pandoc#keyboard#styles#ToggleStrikeout(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strikeout) :set opfunc=pandoc#keyboard#styles#ToggleStrikeoutg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-verbatim-exclusive) :call pandoc#keyboard#styles#SelectVerbatim("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-verbatim-inclusive) :call pandoc#keyboard#styles#SelectVerbatim("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-verbatim) :call pandoc#keyboard#styles#ToggleVerbatim(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-verbatim) :set opfunc=pandoc#keyboard#styles#ToggleVerbatimg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strong-exclusive) :call pandoc#keyboard#styles#SelectStrong("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strong-inclusive) :call pandoc#keyboard#styles#SelectStrong("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strong) :call pandoc#keyboard#styles#ToggleStrong(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strong) :set opfunc=pandoc#keyboard#styles#ToggleStrongg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-emphasis-exclusive) :call pandoc#keyboard#styles#SelectEmphasis("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-emphasis-inclusive) :call pandoc#keyboard#styles#SelectEmphasis("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-emphasis) :call pandoc#keyboard#styles#ToggleEmphasis(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-emphasis) :set opfunc=pandoc#keyboard#styles#ToggleEmphasisg@
noremap <buffer> <silent> <Plug>(pandoc-keyboard-nth-header-child) :call pandoc#keyboard#sections#GotoNthChildHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-last-header-child) :call pandoc#keyboard#sections#LastChildHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-first-header-child) :call pandoc#keyboard#sections#FirstChildHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-header-sibling) :call pandoc#keyboard#sections#PrevSiblingHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-header-sibling) :call pandoc#keyboard#sections#NextSiblingHeader()
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-section-exclusive) :call pandoc#keyboard#sections#SelectSection('exclusive')
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-section-inclusive) :call pandoc#keyboard#sections#SelectSection('inclusive')
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-header-parent) :call pandoc#keyboard#sections#CurrentHeaderParent()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-header) :call pandoc#keyboard#sections#CurrentHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-rw-sect-end) :call pandoc#keyboard#sections#PrevSectionEnd(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ff-sect-end) :call pandoc#keyboard#sections#NextSectionEnd(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-rw-header) :call pandoc#keyboard#sections#BackwardHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ff-header) :call pandoc#keyboard#sections#ForwardHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-header) :call pandoc#keyboard#sections#PrevHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-header) :call pandoc#keyboard#sections#NextHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-remove-header) :call pandoc#keyboard#sections#RemoveHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-apply-header) :call pandoc#keyboard#sections#ApplyHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-nth-li-child) :call pandoc#keyboard#lists#GotoNthListItemChild(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-last-li-child) :call pandoc#keyboard#lists#LastListItemChild()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-first-li-child) :call pandoc#keyboard#lists#FirstListItemChild()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-li-sibling) :call pandoc#keyboard#lists#PrevListItemSibling()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-li-sibling) :call pandoc#keyboard#lists#NextListItemSibling()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-li-parent) :call pandoc#keyboard#lists#CurrentListItemParent()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-li) :call pandoc#keyboard#lists#CurrentListItem()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-li) :call pandoc#keyboard#lists#PrevListItem()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-li) :call pandoc#keyboard#lists#NextListItem()
imap <buffer> <silent>  =RCompleteArgs()
inoremap <buffer> <silent> ,ca :call b:SendChunkToR("echo", "down")a
inoremap <buffer> <silent> ,cd :call b:SendChunkToR("silent", "down")a
inoremap <buffer> <silent> ,ce :call b:SendChunkToR("echo", "stay")a
inoremap <buffer> <silent> ,cc :call b:SendChunkToR("silent", "stay")a
inoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")a
inoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()a
inoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")a
inoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")a
inoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")a
inoremap <buffer> <silent> ,kn :call RKnit()a
inoremap <buffer> <silent> ,rd :call RSetWD()a
inoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)a
inoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)a
inoremap <buffer> <silent> ,ro :call RObjBrowser()a
inoremap <buffer> <silent> ,rb :call RAction("plotsumm")a
inoremap <buffer> <silent> ,rg :call RAction("plot")a
inoremap <buffer> <silent> ,rs :call RAction("summary")a
inoremap <buffer> <silent> ,rh :call RAction("help")a
inoremap <buffer> <silent> ,re :call RAction("example")a
inoremap <buffer> <silent> ,ra :call RAction("args")a
inoremap <buffer> <silent> ,rt :call RAction("str")a
inoremap <buffer> <silent> ,rn :call RAction("vim.names")a
inoremap <buffer> <silent> ,rp :call RAction("print")a
inoremap <buffer> <silent> ,rm :call RClearAll()a
inoremap <buffer> <silent> ,rr :call RClearConsole()a
inoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")a
imap <buffer> <silent> ,r<Right> l:call RSendPartOfLine("right", 0)i
imap <buffer> <silent> ,r<Left> l:call RSendPartOfLine("left", 0)i
inoremap <buffer> <silent> ,q :call SendLineToR("newline")a
inoremap <buffer> <silent> ,o :call SendLineToRAndInsertOutput()0i
inoremap <buffer> <silent> ,d :call SendLineToR("down")0i
inoremap <buffer> <silent> ,l :call SendLineToR("stay")a
inoremap <buffer> <silent> ,ch :call SendFHChunkToR()a
inoremap <buffer> <silent> ,pa :call SendParagraphToR("echo", "down")a
inoremap <buffer> <silent> ,pd :call SendParagraphToR("silent", "down")a
inoremap <buffer> <silent> ,pe :call SendParagraphToR("echo", "stay")a
inoremap <buffer> <silent> ,pp :call SendParagraphToR("silent", "stay")a
inoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")a
inoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")a
inoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")a
inoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")a
inoremap <buffer> <silent> ,ba :call SendMBlockToR("echo", "down")a
inoremap <buffer> <silent> ,bd :call SendMBlockToR("silent", "down")a
inoremap <buffer> <silent> ,be :call SendMBlockToR("echo", "stay")a
inoremap <buffer> <silent> ,bb :call SendMBlockToR("silent", "stay")a
inoremap <buffer> <silent> ,; :call MovePosRCodeComment("normal")a
inoremap <buffer> <silent> ,xu :call RSimpleCommentLine("normal", "u")a
inoremap <buffer> <silent> ,xc :call RSimpleCommentLine("normal", "c")a
inoremap <buffer> <silent> ,xx :call RComment("normal")a
inoremap <buffer> <silent> ,rw :call RQuit('save')a
inoremap <buffer> <silent> ,rq :call RQuit('nosave')a
inoremap <buffer> <silent> ,rc :call StartR("custom")a
inoremap <buffer> <silent> ,rv :call StartR("vanilla")a
inoremap <buffer> <silent> ,rf :call StartR("R")a
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=2
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=pandoc\ -t\ markdown\ --reference-links\ --no-wrap
setlocal errorformat=
setlocal expandtab
if &filetype != 'pandoc'
setlocal filetype=pandoc
endif
set foldcolumn=6
setlocal foldcolumn=3
setlocal foldenable
setlocal foldexpr=pandoc#folding#FoldExpr()
setlocal foldignore=#
setlocal foldlevel=1
setlocal foldmarker={{{,}}}
set foldmethod=marker
setlocal foldmethod=expr
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=pandoc#folding#FoldText()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetRmdIndent()
setlocal indentkeys=0{,0},:,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=48-57,a-z,A-Z,192-255
setlocal keywordprg=
setlocal linebreak
setlocal nolisp
set list
setlocal list
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=pandoc#completion#Complete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal spell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%{lightline#link()}%#LightLineLeft_inactive_0#%(\ %t\ %)%#LightLineLeft_inactive_0_1#â–¶%#LightLineMiddle_inactive#%=%#LightLineRight_inactive_1_2#â–¶%#LightLineRight_inactive_1#%(\ %3p%%\ %)%#LightLineRight_inactive_0_1#â–¶%#LightLineRight_inactive_0#%(\ %3l:%-2v\ %)
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'pandoc'
setlocal syntax=pandoc
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
1
normal! zo
239
normal! zo
239
normal! zc
let s:l = 1 - ((0 * winheight(0) + 7) / 14)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
lcd ~/Documents/data_intensive/book/ch1_learning
wincmd w
argglobal
edit ~/Documents/data_intensive/book/ch2_curves/ch2_curves_function.rmd
nnoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")
nnoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()
nnoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")
nnoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")
nnoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")
nnoremap <buffer> <silent> ,kn :call RKnit()
nnoremap <buffer> <silent> ,rd :call RSetWD()
nnoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)
nnoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)
nnoremap <buffer> <silent> ,ro :call RObjBrowser()
nnoremap <buffer> <silent> ,rb :call RAction("plotsumm")
nnoremap <buffer> <silent> ,rg :call RAction("plot")
nnoremap <buffer> <silent> ,rs :call RAction("summary")
nnoremap <buffer> <silent> ,rh :call RAction("help")
nnoremap <buffer> <silent> ,re :call RAction("example")
nnoremap <buffer> <silent> ,ra :call RAction("args")
nnoremap <buffer> <silent> ,rt :call RAction("str")
nnoremap <buffer> <silent> ,rn :call RAction("vim.names")
nnoremap <buffer> <silent> ,rp :call RAction("print")
nnoremap <buffer> <silent> ,rm :call RClearAll()
nnoremap <buffer> <silent> ,rr :call RClearConsole()
nnoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")
nnoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")
nnoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")
nnoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")
nnoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")
nnoremap <buffer> <silent> ,; :call MovePosRCodeComment("normal")
nnoremap <buffer> <silent> ,xu :call RSimpleCommentLine("normal", "u")
nnoremap <buffer> <silent> ,xc :call RSimpleCommentLine("normal", "c")
nnoremap <buffer> <silent> ,xx :call RComment("normal")
nnoremap <buffer> <silent> ,rw :call RQuit('save')
nnoremap <buffer> <silent> ,rq :call RQuit('nosave')
nnoremap <buffer> <silent> ,rc :call StartR("custom")
nnoremap <buffer> <silent> ,rv :call StartR("vanilla")
nnoremap <buffer> <silent> ,rf :call StartR("R")
vnoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")
vnoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()
vnoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")
vnoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")
vnoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")
vnoremap <buffer> <silent> ,kn :call RKnit()
vnoremap <buffer> <silent> ,rd :call RSetWD()
vnoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)
vnoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)
vnoremap <buffer> <silent> ,ro :call RObjBrowser()
vnoremap <buffer> <silent> ,rb :call RAction("plotsumm")
vnoremap <buffer> <silent> ,rg :call RAction("plot")
vnoremap <buffer> <silent> ,rs :call RAction("summary")
vnoremap <buffer> <silent> ,rh :call RAction("help")
vnoremap <buffer> <silent> ,re :call RAction("example")
vnoremap <buffer> <silent> ,ra :call RAction("args")
vnoremap <buffer> <silent> ,rt :call RAction("str")
vnoremap <buffer> <silent> ,rn :call RAction("vim.names")
vnoremap <buffer> <silent> ,rp :call RAction("print")
vnoremap <buffer> <silent> ,rm :call RClearAll()
vnoremap <buffer> <silent> ,rr :call RClearConsole()
vnoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")
vnoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")
vnoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")
vnoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")
vnoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")
vnoremap <buffer> <silent> ,; :call MovePosRCodeComment("selection")
vnoremap <buffer> <silent> ,xu :call RSimpleCommentLine("selection", "u")
vnoremap <buffer> <silent> ,xc :call RSimpleCommentLine("selection", "c")
vnoremap <buffer> <silent> ,xx :call RComment("selection")
vnoremap <buffer> <silent> ,rw :call RQuit('save')
vnoremap <buffer> <silent> ,rq :call RQuit('nosave')
vnoremap <buffer> <silent> ,rc :call StartR("custom")
vnoremap <buffer> <silent> ,rv :call StartR("vanilla")
vnoremap <buffer> <silent> ,rf :call StartR("R")
onoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")
onoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()
onoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")
onoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")
onoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")
onoremap <buffer> <silent> ,kn :call RKnit()
onoremap <buffer> <silent> ,rd :call RSetWD()
onoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)
onoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)
onoremap <buffer> <silent> ,ro :call RObjBrowser()
onoremap <buffer> <silent> ,rb :call RAction("plotsumm")
onoremap <buffer> <silent> ,rg :call RAction("plot")
onoremap <buffer> <silent> ,rs :call RAction("summary")
onoremap <buffer> <silent> ,rh :call RAction("help")
onoremap <buffer> <silent> ,re :call RAction("example")
onoremap <buffer> <silent> ,ra :call RAction("args")
onoremap <buffer> <silent> ,rt :call RAction("str")
onoremap <buffer> <silent> ,rn :call RAction("vim.names")
onoremap <buffer> <silent> ,rp :call RAction("print")
onoremap <buffer> <silent> ,rm :call RClearAll()
onoremap <buffer> <silent> ,rr :call RClearConsole()
onoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")
onoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")
onoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")
onoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")
onoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")
onoremap <buffer> <silent> ,; :call MovePosRCodeComment("normal")
onoremap <buffer> <silent> ,xu :call RSimpleCommentLine("normal", "u")
onoremap <buffer> <silent> ,xc :call RSimpleCommentLine("normal", "c")
onoremap <buffer> <silent> ,xx :call RComment("normal")
onoremap <buffer> <silent> ,rw :call RQuit('save')
onoremap <buffer> <silent> ,rq :call RQuit('nosave')
onoremap <buffer> <silent> ,rc :call StartR("custom")
onoremap <buffer> <silent> ,rv :call StartR("vanilla")
onoremap <buffer> <silent> ,rf :call StartR("R")
noremap <buffer> <silent> ,ca :call b:SendChunkToR("echo", "down")
noremap <buffer> <silent> ,cd :call b:SendChunkToR("silent", "down")
noremap <buffer> <silent> ,ce :call b:SendChunkToR("echo", "stay")
noremap <buffer> <silent> ,cc :call b:SendChunkToR("silent", "stay")
noremap <buffer> <silent> ,o :call SendLineToRAndInsertOutput()0
noremap <buffer> <silent> ,l :call SendLineToR("stay")
noremap <buffer> <silent> ,ch :call SendFHChunkToR()
noremap <buffer> <silent> ,pa :call SendParagraphToR("echo", "down")
noremap <buffer> <silent> ,pd :call SendParagraphToR("silent", "down")
noremap <buffer> <silent> ,pe :call SendParagraphToR("echo", "stay")
noremap <buffer> <silent> ,pp :call SendParagraphToR("silent", "stay")
vnoremap <buffer> <silent> ,sa :call SendSelectionToR("echo", "down")
vnoremap <buffer> <silent> ,se :call SendSelectionToR("echo", "stay")
vnoremap <buffer> <silent> ,ss :call SendSelectionToR("silent", "stay")
noremap <buffer> <silent> ,ba :call SendMBlockToR("echo", "down")
noremap <buffer> <silent> ,bd :call SendMBlockToR("silent", "down")
noremap <buffer> <silent> ,be :call SendMBlockToR("echo", "stay")
noremap <buffer> <silent> ,bb :call SendMBlockToR("silent", "stay")
let s:cpo_save=&cpo
set cpo&vim
nmap <buffer> ,xi <Plug>(pandoc-hypertext-goto-id)
nmap <buffer> ,nr <Plug>(pandoc-keyboard-ref-insert)
vmap <buffer> ,_ <Plug>(pandoc-keyboard-toggle-subscript)
nmap <buffer> ,_ <Plug>(pandoc-keyboard-toggle-subscript)
vmap <buffer> ,^ <Plug>(pandoc-keyboard-toggle-superscript)
nmap <buffer> ,^ <Plug>(pandoc-keyboard-toggle-superscript)
vmap <buffer> ,~~ <Plug>(pandoc-keyboard-toggle-strikeout)
nmap <buffer> ,~~ <Plug>(pandoc-keyboard-toggle-strikeout)
vmap <buffer> ,' <Plug>(pandoc-keyboard-toggle-verbatim)
nmap <buffer> ,' <Plug>(pandoc-keyboard-toggle-verbatim)
vmap <buffer> ,b <Plug>(pandoc-keyboard-toggle-strong)
nmap <buffer> ,b <Plug>(pandoc-keyboard-toggle-strong)
vmap <buffer> ,i <Plug>(pandoc-keyboard-toggle-emphasis)
nmap <buffer> ,i <Plug>(pandoc-keyboard-toggle-emphasis)
nmap <buffer> ,hcn <Plug>(pandoc-keyboard-nth-header-child)
nmap <buffer> ,hcl <Plug>(pandoc-keyboard-last-header-child)
nmap <buffer> ,hcf <Plug>(pandoc-keyboard-first-header-child)
nmap <buffer> ,hsb <Plug>(pandoc-keyboard-prev-header-sibling)
nmap <buffer> ,hsn <Plug>(pandoc-keyboard-next-header-sibling)
nmap <buffer> ,hp <Plug>(pandoc-keyboard-cur-header-parent)
nmap <buffer> ,hh <Plug>(pandoc-keyboard-cur-header)
nmap <buffer> ,hb <Plug>(pandoc-keyboard-prev-header)
nmap <buffer> ,hn <Plug>(pandoc-keyboard-next-header)
nmap <buffer> ,hd <Plug>(pandoc-keyboard-remove-header)
nmap <buffer> ,# <Plug>(pandoc-keyboard-apply-header)
nmap <buffer> ,lcn <Plug>(pandoc-keyboard-nth-li-child)
nmap <buffer> ,lcl <Plug>(pandoc-keyboard-last-li-child)
nmap <buffer> ,lcf <Plug>(pandoc-keyboard-first-li-child)
nmap <buffer> ,lsp <Plug>(pandoc-keyboard-prev-li-sibling)
nmap <buffer> ,lsn <Plug>(pandoc-keyboard-next-li-sibling)
nmap <buffer> ,llp <Plug>(pandoc-keyboard-cur-li-parent)
nmap <buffer> ,ll <Plug>(pandoc-keyboard-cur-li)
nmap <buffer> ,lp <Plug>(pandoc-keyboard-prev-li)
nmap <buffer> ,ln <Plug>(pandoc-keyboard-next-li)
nmap <buffer> [] <Plug>(pandoc-keyboard-rw-sect-end)
nmap <buffer> [[ <Plug>(pandoc-keyboard-rw-header)
nmap <buffer> ][ <Plug>(pandoc-keyboard-ff-sect-end)
nmap <buffer> ]] <Plug>(pandoc-keyboard-ff-header)
omap <buffer> apt :normal vapl
vmap <buffer> <silent> apt <Plug>(pandoc-keyboard-select-subscript-inclusive)
omap <buffer> apu :normal vapu
vmap <buffer> <silent> apu <Plug>(pandoc-keyboard-select-superscript-inclusive)
omap <buffer> apk :normal vapk
vmap <buffer> <silent> apk <Plug>(pandoc-keyboard-select-strikeout-inclusive)
omap <buffer> apv :normal vapv
vmap <buffer> <silent> apv <Plug>(pandoc-keyboard-select-verbatim-inclusive)
omap <buffer> aps :normal vaps
vmap <buffer> <silent> aps <Plug>(pandoc-keyboard-select-strong-inclusive)
omap <buffer> ape :normal vape
vmap <buffer> <silent> ape <Plug>(pandoc-keyboard-select-emphasis-inclusive)
omap <buffer> aS :normal VaS
vmap <buffer> aS <Plug>(pandoc-keyboard-select-section-inclusive)
nmap <buffer> <silent> gN :call b:PreviousRChunk()
nmap <buffer> <silent> gn :call b:NextRChunk()
nmap <buffer> gx <Plug>(pandoc-hypertext-open-system)
nmap <buffer> gf <Plug>(pandoc-hypertext-open-local)
omap <buffer> ipt :normal vipl
vmap <buffer> <silent> ipt <Plug>(pandoc-keyboard-select-subscript-exclusive)
omap <buffer> ipu :normal vipu
vmap <buffer> <silent> ipu <Plug>(pandoc-keyboard-select-superscript-exclusive)
omap <buffer> ipk :normal vipk
vmap <buffer> <silent> ipk <Plug>(pandoc-keyboard-select-strikeout-exclusive)
omap <buffer> ipv :normal vipv
vmap <buffer> <silent> ipv <Plug>(pandoc-keyboard-select-verbatim-exclusive)
omap <buffer> ips :normal vips
vmap <buffer> <silent> ips <Plug>(pandoc-keyboard-select-strong-exclusive)
omap <buffer> ipe :normal vipe
vmap <buffer> <silent> ipe <Plug>(pandoc-keyboard-select-emphasis-exclusive)
omap <buffer> iS :normal ViS
vmap <buffer> iS <Plug>(pandoc-keyboard-select-section-exclusive)
vnoremap <buffer> j gj
nnoremap <buffer> j gj
vnoremap <buffer> k gk
nnoremap <buffer> k gk
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-subscript) :set opfunc=pandoc#keyboard#styles#ToggleSubscriptg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-superscript) :set opfunc=pandoc#keyboard#styles#ToggleSuperscriptg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strikeout) :set opfunc=pandoc#keyboard#styles#ToggleStrikeoutg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-verbatim) :set opfunc=pandoc#keyboard#styles#ToggleVerbatimg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strong) :set opfunc=pandoc#keyboard#styles#ToggleStrongg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-emphasis) :set opfunc=pandoc#keyboard#styles#ToggleEmphasisg@
noremap <buffer> <silent> <Plug>RDSendLine :call SendLineToR("down")0
vnoremap <buffer> <silent> <Plug>RDSendSelection :call SendSelectionToR("silent", "down")
nnoremap <buffer> <silent> <Plug>(pandoc-hypertext-goto-id) :call pandoc#hypertext#GotoID()
nnoremap <buffer> <silent> <Plug>(pandoc-hypertext-open-system) :call pandoc#hypertext#OpenSystem()
nnoremap <buffer> <silent> <Plug>(pandoc-hypertext-open-local) :call pandoc#hypertext#OpenLocal()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ref-backfrom) :call pandoc#keyboard#references#BACKFROM_Ref()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ref-goto) :call pandoc#keyboard#references#GOTO_Ref()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ref-insert) :call pandoc#keyboard#references#Insert_Ref()a
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-subscript-exclusive) :call pandoc#keyboard#styles#SelectSubscript("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-subscript-inclusive) :call pandoc#keyboard#styles#SelectSubscript("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-subscript) :call pandoc#keyboard#styles#ToggleSubscript(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-subscript) :set opfunc=pandoc#keyboard#styles#ToggleSubscriptg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-superscript-exclusive) :call pandoc#keyboard#styles#SelectSuperscript("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-superscript-inclusive) :call pandoc#keyboard#styles#SelectSuperscript("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-superscript) :call pandoc#keyboard#styles#ToggleSuperscript(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-superscript) :set opfunc=pandoc#keyboard#styles#ToggleSuperscriptg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strikeout-exclusive) :call pandoc#keyboard#styles#SelectStrikeout("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strikeout-inclusive) :call pandoc#keyboard#styles#SelectStrikeout("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strikeout) :call pandoc#keyboard#styles#ToggleStrikeout(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strikeout) :set opfunc=pandoc#keyboard#styles#ToggleStrikeoutg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-verbatim-exclusive) :call pandoc#keyboard#styles#SelectVerbatim("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-verbatim-inclusive) :call pandoc#keyboard#styles#SelectVerbatim("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-verbatim) :call pandoc#keyboard#styles#ToggleVerbatim(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-verbatim) :set opfunc=pandoc#keyboard#styles#ToggleVerbatimg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strong-exclusive) :call pandoc#keyboard#styles#SelectStrong("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strong-inclusive) :call pandoc#keyboard#styles#SelectStrong("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strong) :call pandoc#keyboard#styles#ToggleStrong(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strong) :set opfunc=pandoc#keyboard#styles#ToggleStrongg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-emphasis-exclusive) :call pandoc#keyboard#styles#SelectEmphasis("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-emphasis-inclusive) :call pandoc#keyboard#styles#SelectEmphasis("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-emphasis) :call pandoc#keyboard#styles#ToggleEmphasis(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-emphasis) :set opfunc=pandoc#keyboard#styles#ToggleEmphasisg@
noremap <buffer> <silent> <Plug>(pandoc-keyboard-nth-header-child) :call pandoc#keyboard#sections#GotoNthChildHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-last-header-child) :call pandoc#keyboard#sections#LastChildHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-first-header-child) :call pandoc#keyboard#sections#FirstChildHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-header-sibling) :call pandoc#keyboard#sections#PrevSiblingHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-header-sibling) :call pandoc#keyboard#sections#NextSiblingHeader()
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-section-exclusive) :call pandoc#keyboard#sections#SelectSection('exclusive')
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-section-inclusive) :call pandoc#keyboard#sections#SelectSection('inclusive')
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-header-parent) :call pandoc#keyboard#sections#CurrentHeaderParent()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-header) :call pandoc#keyboard#sections#CurrentHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-rw-sect-end) :call pandoc#keyboard#sections#PrevSectionEnd(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ff-sect-end) :call pandoc#keyboard#sections#NextSectionEnd(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-rw-header) :call pandoc#keyboard#sections#BackwardHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ff-header) :call pandoc#keyboard#sections#ForwardHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-header) :call pandoc#keyboard#sections#PrevHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-header) :call pandoc#keyboard#sections#NextHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-remove-header) :call pandoc#keyboard#sections#RemoveHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-apply-header) :call pandoc#keyboard#sections#ApplyHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-nth-li-child) :call pandoc#keyboard#lists#GotoNthListItemChild(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-last-li-child) :call pandoc#keyboard#lists#LastListItemChild()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-first-li-child) :call pandoc#keyboard#lists#FirstListItemChild()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-li-sibling) :call pandoc#keyboard#lists#PrevListItemSibling()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-li-sibling) :call pandoc#keyboard#lists#NextListItemSibling()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-li-parent) :call pandoc#keyboard#lists#CurrentListItemParent()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-li) :call pandoc#keyboard#lists#CurrentListItem()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-li) :call pandoc#keyboard#lists#PrevListItem()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-li) :call pandoc#keyboard#lists#NextListItem()
imap <buffer> <silent>  =RCompleteArgs()
inoremap <buffer> <silent> ,ca :call b:SendChunkToR("echo", "down")a
inoremap <buffer> <silent> ,cd :call b:SendChunkToR("silent", "down")a
inoremap <buffer> <silent> ,ce :call b:SendChunkToR("echo", "stay")a
inoremap <buffer> <silent> ,cc :call b:SendChunkToR("silent", "stay")a
inoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")a
inoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()a
inoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")a
inoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")a
inoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")a
inoremap <buffer> <silent> ,kn :call RKnit()a
inoremap <buffer> <silent> ,rd :call RSetWD()a
inoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)a
inoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)a
inoremap <buffer> <silent> ,ro :call RObjBrowser()a
inoremap <buffer> <silent> ,rb :call RAction("plotsumm")a
inoremap <buffer> <silent> ,rg :call RAction("plot")a
inoremap <buffer> <silent> ,rs :call RAction("summary")a
inoremap <buffer> <silent> ,rh :call RAction("help")a
inoremap <buffer> <silent> ,re :call RAction("example")a
inoremap <buffer> <silent> ,ra :call RAction("args")a
inoremap <buffer> <silent> ,rt :call RAction("str")a
inoremap <buffer> <silent> ,rn :call RAction("vim.names")a
inoremap <buffer> <silent> ,rp :call RAction("print")a
inoremap <buffer> <silent> ,rm :call RClearAll()a
inoremap <buffer> <silent> ,rr :call RClearConsole()a
inoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")a
imap <buffer> <silent> ,r<Right> l:call RSendPartOfLine("right", 0)i
imap <buffer> <silent> ,r<Left> l:call RSendPartOfLine("left", 0)i
inoremap <buffer> <silent> ,q :call SendLineToR("newline")a
inoremap <buffer> <silent> ,o :call SendLineToRAndInsertOutput()0i
inoremap <buffer> <silent> ,d :call SendLineToR("down")0i
inoremap <buffer> <silent> ,l :call SendLineToR("stay")a
inoremap <buffer> <silent> ,ch :call SendFHChunkToR()a
inoremap <buffer> <silent> ,pa :call SendParagraphToR("echo", "down")a
inoremap <buffer> <silent> ,pd :call SendParagraphToR("silent", "down")a
inoremap <buffer> <silent> ,pe :call SendParagraphToR("echo", "stay")a
inoremap <buffer> <silent> ,pp :call SendParagraphToR("silent", "stay")a
inoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")a
inoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")a
inoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")a
inoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")a
inoremap <buffer> <silent> ,ba :call SendMBlockToR("echo", "down")a
inoremap <buffer> <silent> ,bd :call SendMBlockToR("silent", "down")a
inoremap <buffer> <silent> ,be :call SendMBlockToR("echo", "stay")a
inoremap <buffer> <silent> ,bb :call SendMBlockToR("silent", "stay")a
inoremap <buffer> <silent> ,; :call MovePosRCodeComment("normal")a
inoremap <buffer> <silent> ,xu :call RSimpleCommentLine("normal", "u")a
inoremap <buffer> <silent> ,xc :call RSimpleCommentLine("normal", "c")a
inoremap <buffer> <silent> ,xx :call RComment("normal")a
inoremap <buffer> <silent> ,rw :call RQuit('save')a
inoremap <buffer> <silent> ,rq :call RQuit('nosave')a
inoremap <buffer> <silent> ,rc :call StartR("custom")a
inoremap <buffer> <silent> ,rv :call StartR("vanilla")a
inoremap <buffer> <silent> ,rf :call StartR("R")a
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=2
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=pandoc\ -t\ markdown\ --reference-links\ --no-wrap
setlocal errorformat=
setlocal expandtab
if &filetype != 'pandoc'
setlocal filetype=pandoc
endif
set foldcolumn=6
setlocal foldcolumn=3
setlocal foldenable
setlocal foldexpr=pandoc#folding#FoldExpr()
setlocal foldignore=#
setlocal foldlevel=1
setlocal foldmarker={{{,}}}
set foldmethod=marker
setlocal foldmethod=expr
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=pandoc#folding#FoldText()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetRmdIndent()
setlocal indentkeys=0{,0},:,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=48-57,a-z,A-Z,192-255
setlocal keywordprg=
setlocal linebreak
setlocal nolisp
set list
setlocal list
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=pandoc#completion#Complete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal spell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%{lightline#link()}%#LightLineLeft_inactive_0#%(\ %t\ %)%#LightLineLeft_inactive_0_1#â–¶%#LightLineMiddle_inactive#%=%#LightLineRight_inactive_1_2#â–¶%#LightLineRight_inactive_1#%(\ %3p%%\ %)%#LightLineRight_inactive_0_1#â–¶%#LightLineRight_inactive_0#%(\ %3l:%-2v\ %)
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'pandoc'
setlocal syntax=pandoc
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
let s:l = 74 - ((22 * winheight(0) + 7) / 15)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
74
normal! 0
lcd ~/Documents/data_intensive/book/ch2_curves
wincmd w
argglobal
edit ~/Documents/data_intensive/book/ch3_dimensionality/ch3_dimensional_exuberance.rmd
nnoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")
nnoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()
nnoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")
nnoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")
nnoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")
nnoremap <buffer> <silent> ,kn :call RKnit()
nnoremap <buffer> <silent> ,rd :call RSetWD()
nnoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)
nnoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)
nnoremap <buffer> <silent> ,ro :call RObjBrowser()
nnoremap <buffer> <silent> ,rb :call RAction("plotsumm")
nnoremap <buffer> <silent> ,rg :call RAction("plot")
nnoremap <buffer> <silent> ,rs :call RAction("summary")
nnoremap <buffer> <silent> ,rh :call RAction("help")
nnoremap <buffer> <silent> ,re :call RAction("example")
nnoremap <buffer> <silent> ,ra :call RAction("args")
nnoremap <buffer> <silent> ,rt :call RAction("str")
nnoremap <buffer> <silent> ,rn :call RAction("vim.names")
nnoremap <buffer> <silent> ,rp :call RAction("print")
nnoremap <buffer> <silent> ,rm :call RClearAll()
nnoremap <buffer> <silent> ,rr :call RClearConsole()
nnoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")
nnoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")
nnoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")
nnoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")
nnoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")
nnoremap <buffer> <silent> ,; :call MovePosRCodeComment("normal")
nnoremap <buffer> <silent> ,xu :call RSimpleCommentLine("normal", "u")
nnoremap <buffer> <silent> ,xc :call RSimpleCommentLine("normal", "c")
nnoremap <buffer> <silent> ,xx :call RComment("normal")
nnoremap <buffer> <silent> ,rw :call RQuit('save')
nnoremap <buffer> <silent> ,rq :call RQuit('nosave')
nnoremap <buffer> <silent> ,rc :call StartR("custom")
nnoremap <buffer> <silent> ,rv :call StartR("vanilla")
nnoremap <buffer> <silent> ,rf :call StartR("R")
vnoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")
vnoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()
vnoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")
vnoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")
vnoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")
vnoremap <buffer> <silent> ,kn :call RKnit()
vnoremap <buffer> <silent> ,rd :call RSetWD()
vnoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)
vnoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)
vnoremap <buffer> <silent> ,ro :call RObjBrowser()
vnoremap <buffer> <silent> ,rb :call RAction("plotsumm")
vnoremap <buffer> <silent> ,rg :call RAction("plot")
vnoremap <buffer> <silent> ,rs :call RAction("summary")
vnoremap <buffer> <silent> ,rh :call RAction("help")
vnoremap <buffer> <silent> ,re :call RAction("example")
vnoremap <buffer> <silent> ,ra :call RAction("args")
vnoremap <buffer> <silent> ,rt :call RAction("str")
vnoremap <buffer> <silent> ,rn :call RAction("vim.names")
vnoremap <buffer> <silent> ,rp :call RAction("print")
vnoremap <buffer> <silent> ,rm :call RClearAll()
vnoremap <buffer> <silent> ,rr :call RClearConsole()
vnoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")
vnoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")
vnoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")
vnoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")
vnoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")
vnoremap <buffer> <silent> ,; :call MovePosRCodeComment("selection")
vnoremap <buffer> <silent> ,xu :call RSimpleCommentLine("selection", "u")
vnoremap <buffer> <silent> ,xc :call RSimpleCommentLine("selection", "c")
vnoremap <buffer> <silent> ,xx :call RComment("selection")
vnoremap <buffer> <silent> ,rw :call RQuit('save')
vnoremap <buffer> <silent> ,rq :call RQuit('nosave')
vnoremap <buffer> <silent> ,rc :call StartR("custom")
vnoremap <buffer> <silent> ,rv :call StartR("vanilla")
vnoremap <buffer> <silent> ,rf :call StartR("R")
onoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")
onoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()
onoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")
onoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")
onoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")
onoremap <buffer> <silent> ,kn :call RKnit()
onoremap <buffer> <silent> ,rd :call RSetWD()
onoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)
onoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)
onoremap <buffer> <silent> ,ro :call RObjBrowser()
onoremap <buffer> <silent> ,rb :call RAction("plotsumm")
onoremap <buffer> <silent> ,rg :call RAction("plot")
onoremap <buffer> <silent> ,rs :call RAction("summary")
onoremap <buffer> <silent> ,rh :call RAction("help")
onoremap <buffer> <silent> ,re :call RAction("example")
onoremap <buffer> <silent> ,ra :call RAction("args")
onoremap <buffer> <silent> ,rt :call RAction("str")
onoremap <buffer> <silent> ,rn :call RAction("vim.names")
onoremap <buffer> <silent> ,rp :call RAction("print")
onoremap <buffer> <silent> ,rm :call RClearAll()
onoremap <buffer> <silent> ,rr :call RClearConsole()
onoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")
onoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")
onoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")
onoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")
onoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")
onoremap <buffer> <silent> ,; :call MovePosRCodeComment("normal")
onoremap <buffer> <silent> ,xu :call RSimpleCommentLine("normal", "u")
onoremap <buffer> <silent> ,xc :call RSimpleCommentLine("normal", "c")
onoremap <buffer> <silent> ,xx :call RComment("normal")
onoremap <buffer> <silent> ,rw :call RQuit('save')
onoremap <buffer> <silent> ,rq :call RQuit('nosave')
onoremap <buffer> <silent> ,rc :call StartR("custom")
onoremap <buffer> <silent> ,rv :call StartR("vanilla")
onoremap <buffer> <silent> ,rf :call StartR("R")
noremap <buffer> <silent> ,ca :call b:SendChunkToR("echo", "down")
noremap <buffer> <silent> ,cd :call b:SendChunkToR("silent", "down")
noremap <buffer> <silent> ,ce :call b:SendChunkToR("echo", "stay")
noremap <buffer> <silent> ,cc :call b:SendChunkToR("silent", "stay")
noremap <buffer> <silent> ,o :call SendLineToRAndInsertOutput()0
noremap <buffer> <silent> ,l :call SendLineToR("stay")
noremap <buffer> <silent> ,ch :call SendFHChunkToR()
noremap <buffer> <silent> ,pa :call SendParagraphToR("echo", "down")
noremap <buffer> <silent> ,pd :call SendParagraphToR("silent", "down")
noremap <buffer> <silent> ,pe :call SendParagraphToR("echo", "stay")
noremap <buffer> <silent> ,pp :call SendParagraphToR("silent", "stay")
vnoremap <buffer> <silent> ,sa :call SendSelectionToR("echo", "down")
vnoremap <buffer> <silent> ,se :call SendSelectionToR("echo", "stay")
vnoremap <buffer> <silent> ,ss :call SendSelectionToR("silent", "stay")
noremap <buffer> <silent> ,ba :call SendMBlockToR("echo", "down")
noremap <buffer> <silent> ,bd :call SendMBlockToR("silent", "down")
noremap <buffer> <silent> ,be :call SendMBlockToR("echo", "stay")
noremap <buffer> <silent> ,bb :call SendMBlockToR("silent", "stay")
let s:cpo_save=&cpo
set cpo&vim
nmap <buffer> ,xi <Plug>(pandoc-hypertext-goto-id)
nmap <buffer> ,nr <Plug>(pandoc-keyboard-ref-insert)
vmap <buffer> ,_ <Plug>(pandoc-keyboard-toggle-subscript)
nmap <buffer> ,_ <Plug>(pandoc-keyboard-toggle-subscript)
vmap <buffer> ,^ <Plug>(pandoc-keyboard-toggle-superscript)
nmap <buffer> ,^ <Plug>(pandoc-keyboard-toggle-superscript)
vmap <buffer> ,~~ <Plug>(pandoc-keyboard-toggle-strikeout)
nmap <buffer> ,~~ <Plug>(pandoc-keyboard-toggle-strikeout)
vmap <buffer> ,' <Plug>(pandoc-keyboard-toggle-verbatim)
nmap <buffer> ,' <Plug>(pandoc-keyboard-toggle-verbatim)
vmap <buffer> ,b <Plug>(pandoc-keyboard-toggle-strong)
nmap <buffer> ,b <Plug>(pandoc-keyboard-toggle-strong)
vmap <buffer> ,i <Plug>(pandoc-keyboard-toggle-emphasis)
nmap <buffer> ,i <Plug>(pandoc-keyboard-toggle-emphasis)
nmap <buffer> ,hcn <Plug>(pandoc-keyboard-nth-header-child)
nmap <buffer> ,hcl <Plug>(pandoc-keyboard-last-header-child)
nmap <buffer> ,hcf <Plug>(pandoc-keyboard-first-header-child)
nmap <buffer> ,hsb <Plug>(pandoc-keyboard-prev-header-sibling)
nmap <buffer> ,hsn <Plug>(pandoc-keyboard-next-header-sibling)
nmap <buffer> ,hp <Plug>(pandoc-keyboard-cur-header-parent)
nmap <buffer> ,hh <Plug>(pandoc-keyboard-cur-header)
nmap <buffer> ,hb <Plug>(pandoc-keyboard-prev-header)
nmap <buffer> ,hn <Plug>(pandoc-keyboard-next-header)
nmap <buffer> ,hd <Plug>(pandoc-keyboard-remove-header)
nmap <buffer> ,# <Plug>(pandoc-keyboard-apply-header)
nmap <buffer> ,lcn <Plug>(pandoc-keyboard-nth-li-child)
nmap <buffer> ,lcl <Plug>(pandoc-keyboard-last-li-child)
nmap <buffer> ,lcf <Plug>(pandoc-keyboard-first-li-child)
nmap <buffer> ,lsp <Plug>(pandoc-keyboard-prev-li-sibling)
nmap <buffer> ,lsn <Plug>(pandoc-keyboard-next-li-sibling)
nmap <buffer> ,llp <Plug>(pandoc-keyboard-cur-li-parent)
nmap <buffer> ,ll <Plug>(pandoc-keyboard-cur-li)
nmap <buffer> ,lp <Plug>(pandoc-keyboard-prev-li)
nmap <buffer> ,ln <Plug>(pandoc-keyboard-next-li)
nmap <buffer> [] <Plug>(pandoc-keyboard-rw-sect-end)
nmap <buffer> [[ <Plug>(pandoc-keyboard-rw-header)
nmap <buffer> ][ <Plug>(pandoc-keyboard-ff-sect-end)
nmap <buffer> ]] <Plug>(pandoc-keyboard-ff-header)
omap <buffer> apt :normal vapl
vmap <buffer> <silent> apt <Plug>(pandoc-keyboard-select-subscript-inclusive)
omap <buffer> apu :normal vapu
vmap <buffer> <silent> apu <Plug>(pandoc-keyboard-select-superscript-inclusive)
omap <buffer> apk :normal vapk
vmap <buffer> <silent> apk <Plug>(pandoc-keyboard-select-strikeout-inclusive)
omap <buffer> apv :normal vapv
vmap <buffer> <silent> apv <Plug>(pandoc-keyboard-select-verbatim-inclusive)
omap <buffer> aps :normal vaps
vmap <buffer> <silent> aps <Plug>(pandoc-keyboard-select-strong-inclusive)
omap <buffer> ape :normal vape
vmap <buffer> <silent> ape <Plug>(pandoc-keyboard-select-emphasis-inclusive)
omap <buffer> aS :normal VaS
vmap <buffer> aS <Plug>(pandoc-keyboard-select-section-inclusive)
nmap <buffer> <silent> gN :call b:PreviousRChunk()
nmap <buffer> <silent> gn :call b:NextRChunk()
nmap <buffer> gx <Plug>(pandoc-hypertext-open-system)
nmap <buffer> gf <Plug>(pandoc-hypertext-open-local)
omap <buffer> ipt :normal vipl
vmap <buffer> <silent> ipt <Plug>(pandoc-keyboard-select-subscript-exclusive)
omap <buffer> ipu :normal vipu
vmap <buffer> <silent> ipu <Plug>(pandoc-keyboard-select-superscript-exclusive)
omap <buffer> ipk :normal vipk
vmap <buffer> <silent> ipk <Plug>(pandoc-keyboard-select-strikeout-exclusive)
omap <buffer> ipv :normal vipv
vmap <buffer> <silent> ipv <Plug>(pandoc-keyboard-select-verbatim-exclusive)
omap <buffer> ips :normal vips
vmap <buffer> <silent> ips <Plug>(pandoc-keyboard-select-strong-exclusive)
omap <buffer> ipe :normal vipe
vmap <buffer> <silent> ipe <Plug>(pandoc-keyboard-select-emphasis-exclusive)
omap <buffer> iS :normal ViS
vmap <buffer> iS <Plug>(pandoc-keyboard-select-section-exclusive)
vnoremap <buffer> j gj
nnoremap <buffer> j gj
vnoremap <buffer> k gk
nnoremap <buffer> k gk
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-subscript) :set opfunc=pandoc#keyboard#styles#ToggleSubscriptg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-superscript) :set opfunc=pandoc#keyboard#styles#ToggleSuperscriptg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strikeout) :set opfunc=pandoc#keyboard#styles#ToggleStrikeoutg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-verbatim) :set opfunc=pandoc#keyboard#styles#ToggleVerbatimg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strong) :set opfunc=pandoc#keyboard#styles#ToggleStrongg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-emphasis) :set opfunc=pandoc#keyboard#styles#ToggleEmphasisg@
noremap <buffer> <silent> <Plug>RDSendLine :call SendLineToR("down")0
vnoremap <buffer> <silent> <Plug>RDSendSelection :call SendSelectionToR("silent", "down")
nnoremap <buffer> <silent> <Plug>(pandoc-hypertext-goto-id) :call pandoc#hypertext#GotoID()
nnoremap <buffer> <silent> <Plug>(pandoc-hypertext-open-system) :call pandoc#hypertext#OpenSystem()
nnoremap <buffer> <silent> <Plug>(pandoc-hypertext-open-local) :call pandoc#hypertext#OpenLocal()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ref-backfrom) :call pandoc#keyboard#references#BACKFROM_Ref()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ref-goto) :call pandoc#keyboard#references#GOTO_Ref()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ref-insert) :call pandoc#keyboard#references#Insert_Ref()a
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-subscript-exclusive) :call pandoc#keyboard#styles#SelectSubscript("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-subscript-inclusive) :call pandoc#keyboard#styles#SelectSubscript("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-subscript) :call pandoc#keyboard#styles#ToggleSubscript(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-subscript) :set opfunc=pandoc#keyboard#styles#ToggleSubscriptg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-superscript-exclusive) :call pandoc#keyboard#styles#SelectSuperscript("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-superscript-inclusive) :call pandoc#keyboard#styles#SelectSuperscript("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-superscript) :call pandoc#keyboard#styles#ToggleSuperscript(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-superscript) :set opfunc=pandoc#keyboard#styles#ToggleSuperscriptg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strikeout-exclusive) :call pandoc#keyboard#styles#SelectStrikeout("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strikeout-inclusive) :call pandoc#keyboard#styles#SelectStrikeout("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strikeout) :call pandoc#keyboard#styles#ToggleStrikeout(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strikeout) :set opfunc=pandoc#keyboard#styles#ToggleStrikeoutg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-verbatim-exclusive) :call pandoc#keyboard#styles#SelectVerbatim("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-verbatim-inclusive) :call pandoc#keyboard#styles#SelectVerbatim("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-verbatim) :call pandoc#keyboard#styles#ToggleVerbatim(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-verbatim) :set opfunc=pandoc#keyboard#styles#ToggleVerbatimg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strong-exclusive) :call pandoc#keyboard#styles#SelectStrong("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strong-inclusive) :call pandoc#keyboard#styles#SelectStrong("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strong) :call pandoc#keyboard#styles#ToggleStrong(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strong) :set opfunc=pandoc#keyboard#styles#ToggleStrongg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-emphasis-exclusive) :call pandoc#keyboard#styles#SelectEmphasis("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-emphasis-inclusive) :call pandoc#keyboard#styles#SelectEmphasis("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-emphasis) :call pandoc#keyboard#styles#ToggleEmphasis(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-emphasis) :set opfunc=pandoc#keyboard#styles#ToggleEmphasisg@
noremap <buffer> <silent> <Plug>(pandoc-keyboard-nth-header-child) :call pandoc#keyboard#sections#GotoNthChildHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-last-header-child) :call pandoc#keyboard#sections#LastChildHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-first-header-child) :call pandoc#keyboard#sections#FirstChildHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-header-sibling) :call pandoc#keyboard#sections#PrevSiblingHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-header-sibling) :call pandoc#keyboard#sections#NextSiblingHeader()
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-section-exclusive) :call pandoc#keyboard#sections#SelectSection('exclusive')
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-section-inclusive) :call pandoc#keyboard#sections#SelectSection('inclusive')
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-header-parent) :call pandoc#keyboard#sections#CurrentHeaderParent()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-header) :call pandoc#keyboard#sections#CurrentHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-rw-sect-end) :call pandoc#keyboard#sections#PrevSectionEnd(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ff-sect-end) :call pandoc#keyboard#sections#NextSectionEnd(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-rw-header) :call pandoc#keyboard#sections#BackwardHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ff-header) :call pandoc#keyboard#sections#ForwardHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-header) :call pandoc#keyboard#sections#PrevHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-header) :call pandoc#keyboard#sections#NextHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-remove-header) :call pandoc#keyboard#sections#RemoveHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-apply-header) :call pandoc#keyboard#sections#ApplyHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-nth-li-child) :call pandoc#keyboard#lists#GotoNthListItemChild(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-last-li-child) :call pandoc#keyboard#lists#LastListItemChild()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-first-li-child) :call pandoc#keyboard#lists#FirstListItemChild()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-li-sibling) :call pandoc#keyboard#lists#PrevListItemSibling()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-li-sibling) :call pandoc#keyboard#lists#NextListItemSibling()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-li-parent) :call pandoc#keyboard#lists#CurrentListItemParent()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-li) :call pandoc#keyboard#lists#CurrentListItem()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-li) :call pandoc#keyboard#lists#PrevListItem()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-li) :call pandoc#keyboard#lists#NextListItem()
imap <buffer> <silent>  =RCompleteArgs()
inoremap <buffer> <silent> ,ca :call b:SendChunkToR("echo", "down")a
inoremap <buffer> <silent> ,cd :call b:SendChunkToR("silent", "down")a
inoremap <buffer> <silent> ,ce :call b:SendChunkToR("echo", "stay")a
inoremap <buffer> <silent> ,cc :call b:SendChunkToR("silent", "stay")a
inoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")a
inoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()a
inoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")a
inoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")a
inoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")a
inoremap <buffer> <silent> ,kn :call RKnit()a
inoremap <buffer> <silent> ,rd :call RSetWD()a
inoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)a
inoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)a
inoremap <buffer> <silent> ,ro :call RObjBrowser()a
inoremap <buffer> <silent> ,rb :call RAction("plotsumm")a
inoremap <buffer> <silent> ,rg :call RAction("plot")a
inoremap <buffer> <silent> ,rs :call RAction("summary")a
inoremap <buffer> <silent> ,rh :call RAction("help")a
inoremap <buffer> <silent> ,re :call RAction("example")a
inoremap <buffer> <silent> ,ra :call RAction("args")a
inoremap <buffer> <silent> ,rt :call RAction("str")a
inoremap <buffer> <silent> ,rn :call RAction("vim.names")a
inoremap <buffer> <silent> ,rp :call RAction("print")a
inoremap <buffer> <silent> ,rm :call RClearAll()a
inoremap <buffer> <silent> ,rr :call RClearConsole()a
inoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")a
imap <buffer> <silent> ,r<Right> l:call RSendPartOfLine("right", 0)i
imap <buffer> <silent> ,r<Left> l:call RSendPartOfLine("left", 0)i
inoremap <buffer> <silent> ,q :call SendLineToR("newline")a
inoremap <buffer> <silent> ,o :call SendLineToRAndInsertOutput()0i
inoremap <buffer> <silent> ,d :call SendLineToR("down")0i
inoremap <buffer> <silent> ,l :call SendLineToR("stay")a
inoremap <buffer> <silent> ,ch :call SendFHChunkToR()a
inoremap <buffer> <silent> ,pa :call SendParagraphToR("echo", "down")a
inoremap <buffer> <silent> ,pd :call SendParagraphToR("silent", "down")a
inoremap <buffer> <silent> ,pe :call SendParagraphToR("echo", "stay")a
inoremap <buffer> <silent> ,pp :call SendParagraphToR("silent", "stay")a
inoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")a
inoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")a
inoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")a
inoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")a
inoremap <buffer> <silent> ,ba :call SendMBlockToR("echo", "down")a
inoremap <buffer> <silent> ,bd :call SendMBlockToR("silent", "down")a
inoremap <buffer> <silent> ,be :call SendMBlockToR("echo", "stay")a
inoremap <buffer> <silent> ,bb :call SendMBlockToR("silent", "stay")a
inoremap <buffer> <silent> ,; :call MovePosRCodeComment("normal")a
inoremap <buffer> <silent> ,xu :call RSimpleCommentLine("normal", "u")a
inoremap <buffer> <silent> ,xc :call RSimpleCommentLine("normal", "c")a
inoremap <buffer> <silent> ,xx :call RComment("normal")a
inoremap <buffer> <silent> ,rw :call RQuit('save')a
inoremap <buffer> <silent> ,rq :call RQuit('nosave')a
inoremap <buffer> <silent> ,rc :call StartR("custom")a
inoremap <buffer> <silent> ,rv :call StartR("vanilla")a
inoremap <buffer> <silent> ,rf :call StartR("R")a
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=2
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=pandoc\ -t\ markdown\ --reference-links\ --no-wrap
setlocal errorformat=
setlocal expandtab
if &filetype != 'pandoc'
setlocal filetype=pandoc
endif
set foldcolumn=6
setlocal foldcolumn=3
setlocal foldenable
setlocal foldexpr=pandoc#folding#FoldExpr()
setlocal foldignore=#
setlocal foldlevel=1
setlocal foldmarker={{{,}}}
set foldmethod=marker
setlocal foldmethod=expr
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=pandoc#folding#FoldText()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetRmdIndent()
setlocal indentkeys=0{,0},:,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=48-57,a-z,A-Z,192-255
setlocal keywordprg=
setlocal linebreak
setlocal nolisp
set list
setlocal list
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=pandoc#completion#Complete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal spell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%{lightline#link()}%#LightLineLeft_active_0#%(\ %{lightline#mode()}\ %)%{(1)*((&paste))?('Â»'):''}%(\ %{&paste?\"PASTE\":\"\"}\ %)%#LightLineLeft_active_0_1#â–¶%#LightLineLeft_active_1#%(\ %{exists(\"*MyFugitive\")?MyFugitive():\"\"}\ %)%{(!!strlen(exists(\"*MyFugitive\")?MyFugitive():\"\"))*((!!strlen(exists(\"*MyReadonly\")?MyReadonly():\"\"))+(1)+(!!strlen(exists(\"*MyModified\")?MyModified():\"\"))+(!!strlen(exists(\"*WordCount\")?WordCount():\"\")))?('Â»'):''}%(\ %{exists(\"*MyReadonly\")?MyReadonly():\"\"}\ %)%{(!!strlen(exists(\"*MyReadonly\")?MyReadonly():\"\"))*((1)+(!!strlen(exists(\"*MyModified\")?MyModified():\"\"))+(!!strlen(exists(\"*WordCount\")?WordCount():\"\")))?('Â»'):''}%(\ %t\ %)%{(1)*((!!strlen(exists(\"*MyModified\")?MyModified():\"\"))+(!!strlen(exists(\"*WordCount\")?WordCount():\"\")))?('Â»'):''}%(\ %{exists(\"*MyModified\")?MyModified():\"\"}\ %)%{(!!strlen(exists(\"*MyModified\")?MyModified():\"\"))*((!!strlen(exists(\"*WordCount\")?WordCount():\"\")))?('Â»'):''}%(\ %{exists(\"*WordCount\")?WordCount():\"\"}\ %)%#LightLineLeft_active_1_2#â–¶%#LightLineMiddle_active#%=%#LightLineRight_active_2_3#Â»%#LightLineRight_active_2#%(\ %{&fileformat}\ %)%{(1)*((1))?('Â»'):''}%(\ %{strlen(&fenc)?&fenc:&enc}\ %)%{(1)*((1)+(1))?('Â»'):''}%(\ %{strlen(&filetype)?&filetype:\"no\ ft\"}\ %)%#LightLineRight_active_1_2#â–¶%#LightLineRight_active_1#%(\ %3p%%\ %)%#LightLineRight_active_0_1#â–¶%#LightLineRight_active_0#%(\ %3l:%-2v\ %)
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'pandoc'
setlocal syntax=pandoc
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
1
normal! zo
let s:l = 153 - ((136 * winheight(0) + 11) / 22)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
153
normal! 0
lcd ~/Documents/data_intensive/book/ch3_dimensionality
wincmd w
argglobal
edit ~/Documents/data_intensive/book/ch5_topologies/ch_genomic_topologies.rmd
nnoremap <buffer> <silent> ,rf :call StartR("R")
nnoremap <buffer> <silent> ,rv :call StartR("vanilla")
nnoremap <buffer> <silent> ,rc :call StartR("custom")
nnoremap <buffer> <silent> ,rq :call RQuit('nosave')
nnoremap <buffer> <silent> ,rw :call RQuit('save')
nnoremap <buffer> <silent> ,xx :call RComment("normal")
nnoremap <buffer> <silent> ,xc :call RSimpleCommentLine("normal", "c")
nnoremap <buffer> <silent> ,xu :call RSimpleCommentLine("normal", "u")
nnoremap <buffer> <silent> ,; :call MovePosRCodeComment("normal")
nnoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")
nnoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")
nnoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")
nnoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")
nnoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")
nnoremap <buffer> <silent> ,rr :call RClearConsole()
nnoremap <buffer> <silent> ,rm :call RClearAll()
nnoremap <buffer> <silent> ,rp :call RAction("print")
nnoremap <buffer> <silent> ,rn :call RAction("vim.names")
nnoremap <buffer> <silent> ,rt :call RAction("str")
nnoremap <buffer> <silent> ,ra :call RAction("args")
nnoremap <buffer> <silent> ,re :call RAction("example")
nnoremap <buffer> <silent> ,rh :call RAction("help")
nnoremap <buffer> <silent> ,rs :call RAction("summary")
nnoremap <buffer> <silent> ,rg :call RAction("plot")
nnoremap <buffer> <silent> ,rb :call RAction("plotsumm")
nnoremap <buffer> <silent> ,ro :call RObjBrowser()
nnoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)
nnoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)
nnoremap <buffer> <silent> ,rd :call RSetWD()
nnoremap <buffer> <silent> ,kn :call RKnit()
nnoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")
nnoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")
nnoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")
nnoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()
nnoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")
vnoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")
vnoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()
vnoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")
vnoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")
vnoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")
vnoremap <buffer> <silent> ,kn :call RKnit()
vnoremap <buffer> <silent> ,rd :call RSetWD()
vnoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)
vnoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)
vnoremap <buffer> <silent> ,ro :call RObjBrowser()
vnoremap <buffer> <silent> ,rb :call RAction("plotsumm")
vnoremap <buffer> <silent> ,rg :call RAction("plot")
vnoremap <buffer> <silent> ,rs :call RAction("summary")
vnoremap <buffer> <silent> ,rh :call RAction("help")
vnoremap <buffer> <silent> ,re :call RAction("example")
vnoremap <buffer> <silent> ,ra :call RAction("args")
vnoremap <buffer> <silent> ,rt :call RAction("str")
vnoremap <buffer> <silent> ,rn :call RAction("vim.names")
vnoremap <buffer> <silent> ,rp :call RAction("print")
vnoremap <buffer> <silent> ,rm :call RClearAll()
vnoremap <buffer> <silent> ,rr :call RClearConsole()
vnoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")
vnoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")
vnoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")
vnoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")
vnoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")
vnoremap <buffer> <silent> ,; :call MovePosRCodeComment("selection")
vnoremap <buffer> <silent> ,xu :call RSimpleCommentLine("selection", "u")
vnoremap <buffer> <silent> ,xc :call RSimpleCommentLine("selection", "c")
vnoremap <buffer> <silent> ,xx :call RComment("selection")
vnoremap <buffer> <silent> ,rw :call RQuit('save')
vnoremap <buffer> <silent> ,rq :call RQuit('nosave')
vnoremap <buffer> <silent> ,rc :call StartR("custom")
vnoremap <buffer> <silent> ,rv :call StartR("vanilla")
vnoremap <buffer> <silent> ,rf :call StartR("R")
onoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")
onoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()
onoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")
onoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")
onoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")
onoremap <buffer> <silent> ,kn :call RKnit()
onoremap <buffer> <silent> ,rd :call RSetWD()
onoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)
onoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)
onoremap <buffer> <silent> ,ro :call RObjBrowser()
onoremap <buffer> <silent> ,rb :call RAction("plotsumm")
onoremap <buffer> <silent> ,rg :call RAction("plot")
onoremap <buffer> <silent> ,rs :call RAction("summary")
onoremap <buffer> <silent> ,rh :call RAction("help")
onoremap <buffer> <silent> ,re :call RAction("example")
onoremap <buffer> <silent> ,ra :call RAction("args")
onoremap <buffer> <silent> ,rt :call RAction("str")
onoremap <buffer> <silent> ,rn :call RAction("vim.names")
onoremap <buffer> <silent> ,rp :call RAction("print")
onoremap <buffer> <silent> ,rm :call RClearAll()
onoremap <buffer> <silent> ,rr :call RClearConsole()
onoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")
onoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")
onoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")
onoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")
onoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")
onoremap <buffer> <silent> ,; :call MovePosRCodeComment("normal")
onoremap <buffer> <silent> ,xu :call RSimpleCommentLine("normal", "u")
onoremap <buffer> <silent> ,xc :call RSimpleCommentLine("normal", "c")
onoremap <buffer> <silent> ,xx :call RComment("normal")
onoremap <buffer> <silent> ,rw :call RQuit('save')
onoremap <buffer> <silent> ,rq :call RQuit('nosave')
onoremap <buffer> <silent> ,rc :call StartR("custom")
onoremap <buffer> <silent> ,rv :call StartR("vanilla")
onoremap <buffer> <silent> ,rf :call StartR("R")
noremap <buffer> <silent> ,ca :call b:SendChunkToR("echo", "down")
noremap <buffer> <silent> ,cd :call b:SendChunkToR("silent", "down")
noremap <buffer> <silent> ,ce :call b:SendChunkToR("echo", "stay")
noremap <buffer> <silent> ,cc :call b:SendChunkToR("silent", "stay")
noremap <buffer> <silent> ,o :call SendLineToRAndInsertOutput()0
noremap <buffer> <silent> ,l :call SendLineToR("stay")
noremap <buffer> <silent> ,ch :call SendFHChunkToR()
noremap <buffer> <silent> ,pa :call SendParagraphToR("echo", "down")
noremap <buffer> <silent> ,pd :call SendParagraphToR("silent", "down")
noremap <buffer> <silent> ,pe :call SendParagraphToR("echo", "stay")
noremap <buffer> <silent> ,pp :call SendParagraphToR("silent", "stay")
vnoremap <buffer> <silent> ,sa :call SendSelectionToR("echo", "down")
vnoremap <buffer> <silent> ,se :call SendSelectionToR("echo", "stay")
vnoremap <buffer> <silent> ,ss :call SendSelectionToR("silent", "stay")
noremap <buffer> <silent> ,ba :call SendMBlockToR("echo", "down")
noremap <buffer> <silent> ,bd :call SendMBlockToR("silent", "down")
noremap <buffer> <silent> ,be :call SendMBlockToR("echo", "stay")
noremap <buffer> <silent> ,bb :call SendMBlockToR("silent", "stay")
let s:cpo_save=&cpo
set cpo&vim
nmap <buffer> ,xi <Plug>(pandoc-hypertext-goto-id)
nmap <buffer> ,nr <Plug>(pandoc-keyboard-ref-insert)
vmap <buffer> ,_ <Plug>(pandoc-keyboard-toggle-subscript)
nmap <buffer> ,_ <Plug>(pandoc-keyboard-toggle-subscript)
vmap <buffer> ,^ <Plug>(pandoc-keyboard-toggle-superscript)
nmap <buffer> ,^ <Plug>(pandoc-keyboard-toggle-superscript)
vmap <buffer> ,~~ <Plug>(pandoc-keyboard-toggle-strikeout)
nmap <buffer> ,~~ <Plug>(pandoc-keyboard-toggle-strikeout)
vmap <buffer> ,' <Plug>(pandoc-keyboard-toggle-verbatim)
nmap <buffer> ,' <Plug>(pandoc-keyboard-toggle-verbatim)
vmap <buffer> ,b <Plug>(pandoc-keyboard-toggle-strong)
nmap <buffer> ,b <Plug>(pandoc-keyboard-toggle-strong)
vmap <buffer> ,i <Plug>(pandoc-keyboard-toggle-emphasis)
nmap <buffer> ,i <Plug>(pandoc-keyboard-toggle-emphasis)
nmap <buffer> ,hcn <Plug>(pandoc-keyboard-nth-header-child)
nmap <buffer> ,hcl <Plug>(pandoc-keyboard-last-header-child)
nmap <buffer> ,hcf <Plug>(pandoc-keyboard-first-header-child)
nmap <buffer> ,hsb <Plug>(pandoc-keyboard-prev-header-sibling)
nmap <buffer> ,hsn <Plug>(pandoc-keyboard-next-header-sibling)
nmap <buffer> ,hp <Plug>(pandoc-keyboard-cur-header-parent)
nmap <buffer> ,hh <Plug>(pandoc-keyboard-cur-header)
nmap <buffer> ,hb <Plug>(pandoc-keyboard-prev-header)
nmap <buffer> ,hn <Plug>(pandoc-keyboard-next-header)
nmap <buffer> ,hd <Plug>(pandoc-keyboard-remove-header)
nmap <buffer> ,# <Plug>(pandoc-keyboard-apply-header)
nmap <buffer> ,lcn <Plug>(pandoc-keyboard-nth-li-child)
nmap <buffer> ,lcl <Plug>(pandoc-keyboard-last-li-child)
nmap <buffer> ,lcf <Plug>(pandoc-keyboard-first-li-child)
nmap <buffer> ,lsp <Plug>(pandoc-keyboard-prev-li-sibling)
nmap <buffer> ,lsn <Plug>(pandoc-keyboard-next-li-sibling)
nmap <buffer> ,llp <Plug>(pandoc-keyboard-cur-li-parent)
nmap <buffer> ,ll <Plug>(pandoc-keyboard-cur-li)
nmap <buffer> ,lp <Plug>(pandoc-keyboard-prev-li)
nmap <buffer> ,ln <Plug>(pandoc-keyboard-next-li)
nmap <buffer> [] <Plug>(pandoc-keyboard-rw-sect-end)
nmap <buffer> [[ <Plug>(pandoc-keyboard-rw-header)
nmap <buffer> ][ <Plug>(pandoc-keyboard-ff-sect-end)
nmap <buffer> ]] <Plug>(pandoc-keyboard-ff-header)
omap <buffer> apt :normal vapl
vmap <buffer> <silent> apt <Plug>(pandoc-keyboard-select-subscript-inclusive)
omap <buffer> apu :normal vapu
vmap <buffer> <silent> apu <Plug>(pandoc-keyboard-select-superscript-inclusive)
omap <buffer> apk :normal vapk
vmap <buffer> <silent> apk <Plug>(pandoc-keyboard-select-strikeout-inclusive)
omap <buffer> apv :normal vapv
vmap <buffer> <silent> apv <Plug>(pandoc-keyboard-select-verbatim-inclusive)
omap <buffer> aps :normal vaps
vmap <buffer> <silent> aps <Plug>(pandoc-keyboard-select-strong-inclusive)
omap <buffer> ape :normal vape
vmap <buffer> <silent> ape <Plug>(pandoc-keyboard-select-emphasis-inclusive)
omap <buffer> aS :normal VaS
vmap <buffer> aS <Plug>(pandoc-keyboard-select-section-inclusive)
nmap <buffer> <silent> gN :call b:PreviousRChunk()
nmap <buffer> <silent> gn :call b:NextRChunk()
nmap <buffer> gx <Plug>(pandoc-hypertext-open-system)
nmap <buffer> gf <Plug>(pandoc-hypertext-open-local)
omap <buffer> ipt :normal vipl
vmap <buffer> <silent> ipt <Plug>(pandoc-keyboard-select-subscript-exclusive)
omap <buffer> ipu :normal vipu
vmap <buffer> <silent> ipu <Plug>(pandoc-keyboard-select-superscript-exclusive)
omap <buffer> ipk :normal vipk
vmap <buffer> <silent> ipk <Plug>(pandoc-keyboard-select-strikeout-exclusive)
omap <buffer> ipv :normal vipv
vmap <buffer> <silent> ipv <Plug>(pandoc-keyboard-select-verbatim-exclusive)
omap <buffer> ips :normal vips
vmap <buffer> <silent> ips <Plug>(pandoc-keyboard-select-strong-exclusive)
omap <buffer> ipe :normal vipe
vmap <buffer> <silent> ipe <Plug>(pandoc-keyboard-select-emphasis-exclusive)
omap <buffer> iS :normal ViS
vmap <buffer> iS <Plug>(pandoc-keyboard-select-section-exclusive)
vnoremap <buffer> j gj
nnoremap <buffer> j gj
vnoremap <buffer> k gk
nnoremap <buffer> k gk
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-emphasis) :set opfunc=pandoc#keyboard#styles#ToggleEmphasisg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strong) :set opfunc=pandoc#keyboard#styles#ToggleStrongg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-verbatim) :set opfunc=pandoc#keyboard#styles#ToggleVerbatimg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strikeout) :set opfunc=pandoc#keyboard#styles#ToggleStrikeoutg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-superscript) :set opfunc=pandoc#keyboard#styles#ToggleSuperscriptg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-subscript) :set opfunc=pandoc#keyboard#styles#ToggleSubscriptg@
noremap <buffer> <silent> <Plug>RDSendLine :call SendLineToR("down")0
vnoremap <buffer> <silent> <Plug>RDSendSelection :call SendSelectionToR("silent", "down")
nnoremap <buffer> <silent> <Plug>(pandoc-hypertext-goto-id) :call pandoc#hypertext#GotoID()
nnoremap <buffer> <silent> <Plug>(pandoc-hypertext-open-system) :call pandoc#hypertext#OpenSystem()
nnoremap <buffer> <silent> <Plug>(pandoc-hypertext-open-local) :call pandoc#hypertext#OpenLocal()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ref-backfrom) :call pandoc#keyboard#references#BACKFROM_Ref()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ref-goto) :call pandoc#keyboard#references#GOTO_Ref()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ref-insert) :call pandoc#keyboard#references#Insert_Ref()a
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-subscript-exclusive) :call pandoc#keyboard#styles#SelectSubscript("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-subscript-inclusive) :call pandoc#keyboard#styles#SelectSubscript("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-subscript) :call pandoc#keyboard#styles#ToggleSubscript(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-subscript) :set opfunc=pandoc#keyboard#styles#ToggleSubscriptg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-superscript-exclusive) :call pandoc#keyboard#styles#SelectSuperscript("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-superscript-inclusive) :call pandoc#keyboard#styles#SelectSuperscript("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-superscript) :call pandoc#keyboard#styles#ToggleSuperscript(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-superscript) :set opfunc=pandoc#keyboard#styles#ToggleSuperscriptg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strikeout-exclusive) :call pandoc#keyboard#styles#SelectStrikeout("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strikeout-inclusive) :call pandoc#keyboard#styles#SelectStrikeout("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strikeout) :call pandoc#keyboard#styles#ToggleStrikeout(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strikeout) :set opfunc=pandoc#keyboard#styles#ToggleStrikeoutg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-verbatim-exclusive) :call pandoc#keyboard#styles#SelectVerbatim("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-verbatim-inclusive) :call pandoc#keyboard#styles#SelectVerbatim("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-verbatim) :call pandoc#keyboard#styles#ToggleVerbatim(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-verbatim) :set opfunc=pandoc#keyboard#styles#ToggleVerbatimg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strong-exclusive) :call pandoc#keyboard#styles#SelectStrong("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strong-inclusive) :call pandoc#keyboard#styles#SelectStrong("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strong) :call pandoc#keyboard#styles#ToggleStrong(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strong) :set opfunc=pandoc#keyboard#styles#ToggleStrongg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-emphasis-exclusive) :call pandoc#keyboard#styles#SelectEmphasis("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-emphasis-inclusive) :call pandoc#keyboard#styles#SelectEmphasis("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-emphasis) :call pandoc#keyboard#styles#ToggleEmphasis(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-emphasis) :set opfunc=pandoc#keyboard#styles#ToggleEmphasisg@
noremap <buffer> <silent> <Plug>(pandoc-keyboard-nth-header-child) :call pandoc#keyboard#sections#GotoNthChildHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-last-header-child) :call pandoc#keyboard#sections#LastChildHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-first-header-child) :call pandoc#keyboard#sections#FirstChildHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-header-sibling) :call pandoc#keyboard#sections#PrevSiblingHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-header-sibling) :call pandoc#keyboard#sections#NextSiblingHeader()
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-section-exclusive) :call pandoc#keyboard#sections#SelectSection('exclusive')
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-section-inclusive) :call pandoc#keyboard#sections#SelectSection('inclusive')
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-header-parent) :call pandoc#keyboard#sections#CurrentHeaderParent()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-header) :call pandoc#keyboard#sections#CurrentHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-rw-sect-end) :call pandoc#keyboard#sections#PrevSectionEnd(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ff-sect-end) :call pandoc#keyboard#sections#NextSectionEnd(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-rw-header) :call pandoc#keyboard#sections#BackwardHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ff-header) :call pandoc#keyboard#sections#ForwardHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-header) :call pandoc#keyboard#sections#PrevHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-header) :call pandoc#keyboard#sections#NextHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-remove-header) :call pandoc#keyboard#sections#RemoveHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-apply-header) :call pandoc#keyboard#sections#ApplyHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-nth-li-child) :call pandoc#keyboard#lists#GotoNthListItemChild(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-last-li-child) :call pandoc#keyboard#lists#LastListItemChild()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-first-li-child) :call pandoc#keyboard#lists#FirstListItemChild()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-li-sibling) :call pandoc#keyboard#lists#PrevListItemSibling()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-li-sibling) :call pandoc#keyboard#lists#NextListItemSibling()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-li-parent) :call pandoc#keyboard#lists#CurrentListItemParent()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-li) :call pandoc#keyboard#lists#CurrentListItem()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-li) :call pandoc#keyboard#lists#PrevListItem()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-li) :call pandoc#keyboard#lists#NextListItem()
imap <buffer> <silent>  =RCompleteArgs()
inoremap <buffer> <silent> ,ca :call b:SendChunkToR("echo", "down")a
inoremap <buffer> <silent> ,cd :call b:SendChunkToR("silent", "down")a
inoremap <buffer> <silent> ,ce :call b:SendChunkToR("echo", "stay")a
inoremap <buffer> <silent> ,cc :call b:SendChunkToR("silent", "stay")a
inoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")a
inoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()a
inoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")a
inoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")a
inoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")a
inoremap <buffer> <silent> ,kn :call RKnit()a
inoremap <buffer> <silent> ,rd :call RSetWD()a
inoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)a
inoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)a
inoremap <buffer> <silent> ,ro :call RObjBrowser()a
inoremap <buffer> <silent> ,rb :call RAction("plotsumm")a
inoremap <buffer> <silent> ,rg :call RAction("plot")a
inoremap <buffer> <silent> ,rs :call RAction("summary")a
inoremap <buffer> <silent> ,rh :call RAction("help")a
inoremap <buffer> <silent> ,re :call RAction("example")a
inoremap <buffer> <silent> ,ra :call RAction("args")a
inoremap <buffer> <silent> ,rt :call RAction("str")a
inoremap <buffer> <silent> ,rn :call RAction("vim.names")a
inoremap <buffer> <silent> ,rp :call RAction("print")a
inoremap <buffer> <silent> ,rm :call RClearAll()a
inoremap <buffer> <silent> ,rr :call RClearConsole()a
inoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")a
imap <buffer> <silent> ,r<Right> l:call RSendPartOfLine("right", 0)i
imap <buffer> <silent> ,r<Left> l:call RSendPartOfLine("left", 0)i
inoremap <buffer> <silent> ,q :call SendLineToR("newline")a
inoremap <buffer> <silent> ,o :call SendLineToRAndInsertOutput()0i
inoremap <buffer> <silent> ,d :call SendLineToR("down")0i
inoremap <buffer> <silent> ,l :call SendLineToR("stay")a
inoremap <buffer> <silent> ,ch :call SendFHChunkToR()a
inoremap <buffer> <silent> ,pa :call SendParagraphToR("echo", "down")a
inoremap <buffer> <silent> ,pd :call SendParagraphToR("silent", "down")a
inoremap <buffer> <silent> ,pe :call SendParagraphToR("echo", "stay")a
inoremap <buffer> <silent> ,pp :call SendParagraphToR("silent", "stay")a
inoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")a
inoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")a
inoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")a
inoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")a
inoremap <buffer> <silent> ,ba :call SendMBlockToR("echo", "down")a
inoremap <buffer> <silent> ,bd :call SendMBlockToR("silent", "down")a
inoremap <buffer> <silent> ,be :call SendMBlockToR("echo", "stay")a
inoremap <buffer> <silent> ,bb :call SendMBlockToR("silent", "stay")a
inoremap <buffer> <silent> ,; :call MovePosRCodeComment("normal")a
inoremap <buffer> <silent> ,xu :call RSimpleCommentLine("normal", "u")a
inoremap <buffer> <silent> ,xc :call RSimpleCommentLine("normal", "c")a
inoremap <buffer> <silent> ,xx :call RComment("normal")a
inoremap <buffer> <silent> ,rw :call RQuit('save')a
inoremap <buffer> <silent> ,rq :call RQuit('nosave')a
inoremap <buffer> <silent> ,rc :call StartR("custom")a
inoremap <buffer> <silent> ,rv :call StartR("vanilla")a
inoremap <buffer> <silent> ,rf :call StartR("R")a
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=2
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=pandoc\ -t\ markdown\ --reference-links\ --no-wrap
setlocal errorformat=
setlocal expandtab
if &filetype != 'pandoc'
setlocal filetype=pandoc
endif
set foldcolumn=6
setlocal foldcolumn=3
setlocal foldenable
setlocal foldexpr=pandoc#folding#FoldExpr()
setlocal foldignore=#
setlocal foldlevel=1
setlocal foldmarker={{{,}}}
set foldmethod=marker
setlocal foldmethod=expr
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=pandoc#folding#FoldText()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetRmdIndent()
setlocal indentkeys=0{,0},:,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=48-57,a-z,A-Z,192-255
setlocal keywordprg=
setlocal linebreak
setlocal nolisp
set list
setlocal list
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=pandoc#completion#Complete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal spell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%{lightline#link()}%#LightLineLeft_inactive_0#%(\ %t\ %)%#LightLineLeft_inactive_0_1#â–¶%#LightLineMiddle_inactive#%=%#LightLineRight_inactive_1_2#â–¶%#LightLineRight_inactive_1#%(\ %3p%%\ %)%#LightLineRight_inactive_0_1#â–¶%#LightLineRight_inactive_0#%(\ %3l:%-2v\ %)
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'pandoc'
setlocal syntax=pandoc
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
let s:l = 1 - ((0 * winheight(0) + 11) / 22)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
lcd ~/Documents/data_intensive/book/ch5_topologies
wincmd w
argglobal
edit ~/Documents/data_intensive/book/ch4_probability/ch_naive_informed.rmd
nnoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")
nnoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()
nnoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")
nnoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")
nnoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")
nnoremap <buffer> <silent> ,kn :call RKnit()
nnoremap <buffer> <silent> ,rd :call RSetWD()
nnoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)
nnoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)
nnoremap <buffer> <silent> ,ro :call RObjBrowser()
nnoremap <buffer> <silent> ,rb :call RAction("plotsumm")
nnoremap <buffer> <silent> ,rg :call RAction("plot")
nnoremap <buffer> <silent> ,rs :call RAction("summary")
nnoremap <buffer> <silent> ,rh :call RAction("help")
nnoremap <buffer> <silent> ,re :call RAction("example")
nnoremap <buffer> <silent> ,ra :call RAction("args")
nnoremap <buffer> <silent> ,rt :call RAction("str")
nnoremap <buffer> <silent> ,rn :call RAction("vim.names")
nnoremap <buffer> <silent> ,rp :call RAction("print")
nnoremap <buffer> <silent> ,rm :call RClearAll()
nnoremap <buffer> <silent> ,rr :call RClearConsole()
nnoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")
nnoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")
nnoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")
nnoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")
nnoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")
nnoremap <buffer> <silent> ,; :call MovePosRCodeComment("normal")
nnoremap <buffer> <silent> ,xu :call RSimpleCommentLine("normal", "u")
nnoremap <buffer> <silent> ,xc :call RSimpleCommentLine("normal", "c")
nnoremap <buffer> <silent> ,xx :call RComment("normal")
nnoremap <buffer> <silent> ,rw :call RQuit('save')
nnoremap <buffer> <silent> ,rq :call RQuit('nosave')
nnoremap <buffer> <silent> ,rc :call StartR("custom")
nnoremap <buffer> <silent> ,rv :call StartR("vanilla")
nnoremap <buffer> <silent> ,rf :call StartR("R")
vnoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")
vnoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()
vnoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")
vnoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")
vnoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")
vnoremap <buffer> <silent> ,kn :call RKnit()
vnoremap <buffer> <silent> ,rd :call RSetWD()
vnoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)
vnoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)
vnoremap <buffer> <silent> ,ro :call RObjBrowser()
vnoremap <buffer> <silent> ,rb :call RAction("plotsumm")
vnoremap <buffer> <silent> ,rg :call RAction("plot")
vnoremap <buffer> <silent> ,rs :call RAction("summary")
vnoremap <buffer> <silent> ,rh :call RAction("help")
vnoremap <buffer> <silent> ,re :call RAction("example")
vnoremap <buffer> <silent> ,ra :call RAction("args")
vnoremap <buffer> <silent> ,rt :call RAction("str")
vnoremap <buffer> <silent> ,rn :call RAction("vim.names")
vnoremap <buffer> <silent> ,rp :call RAction("print")
vnoremap <buffer> <silent> ,rm :call RClearAll()
vnoremap <buffer> <silent> ,rr :call RClearConsole()
vnoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")
vnoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")
vnoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")
vnoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")
vnoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")
vnoremap <buffer> <silent> ,; :call MovePosRCodeComment("selection")
vnoremap <buffer> <silent> ,xu :call RSimpleCommentLine("selection", "u")
vnoremap <buffer> <silent> ,xc :call RSimpleCommentLine("selection", "c")
vnoremap <buffer> <silent> ,xx :call RComment("selection")
vnoremap <buffer> <silent> ,rw :call RQuit('save')
vnoremap <buffer> <silent> ,rq :call RQuit('nosave')
vnoremap <buffer> <silent> ,rc :call StartR("custom")
vnoremap <buffer> <silent> ,rv :call StartR("vanilla")
vnoremap <buffer> <silent> ,rf :call StartR("R")
onoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")
onoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()
onoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")
onoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")
onoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")
onoremap <buffer> <silent> ,kn :call RKnit()
onoremap <buffer> <silent> ,rd :call RSetWD()
onoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)
onoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)
onoremap <buffer> <silent> ,ro :call RObjBrowser()
onoremap <buffer> <silent> ,rb :call RAction("plotsumm")
onoremap <buffer> <silent> ,rg :call RAction("plot")
onoremap <buffer> <silent> ,rs :call RAction("summary")
onoremap <buffer> <silent> ,rh :call RAction("help")
onoremap <buffer> <silent> ,re :call RAction("example")
onoremap <buffer> <silent> ,ra :call RAction("args")
onoremap <buffer> <silent> ,rt :call RAction("str")
onoremap <buffer> <silent> ,rn :call RAction("vim.names")
onoremap <buffer> <silent> ,rp :call RAction("print")
onoremap <buffer> <silent> ,rm :call RClearAll()
onoremap <buffer> <silent> ,rr :call RClearConsole()
onoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")
onoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")
onoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")
onoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")
onoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")
onoremap <buffer> <silent> ,; :call MovePosRCodeComment("normal")
onoremap <buffer> <silent> ,xu :call RSimpleCommentLine("normal", "u")
onoremap <buffer> <silent> ,xc :call RSimpleCommentLine("normal", "c")
onoremap <buffer> <silent> ,xx :call RComment("normal")
onoremap <buffer> <silent> ,rw :call RQuit('save')
onoremap <buffer> <silent> ,rq :call RQuit('nosave')
onoremap <buffer> <silent> ,rc :call StartR("custom")
onoremap <buffer> <silent> ,rv :call StartR("vanilla")
onoremap <buffer> <silent> ,rf :call StartR("R")
noremap <buffer> <silent> ,ca :call b:SendChunkToR("echo", "down")
noremap <buffer> <silent> ,cd :call b:SendChunkToR("silent", "down")
noremap <buffer> <silent> ,ce :call b:SendChunkToR("echo", "stay")
noremap <buffer> <silent> ,cc :call b:SendChunkToR("silent", "stay")
noremap <buffer> <silent> ,o :call SendLineToRAndInsertOutput()0
noremap <buffer> <silent> ,l :call SendLineToR("stay")
noremap <buffer> <silent> ,ch :call SendFHChunkToR()
noremap <buffer> <silent> ,pa :call SendParagraphToR("echo", "down")
noremap <buffer> <silent> ,pd :call SendParagraphToR("silent", "down")
noremap <buffer> <silent> ,pe :call SendParagraphToR("echo", "stay")
noremap <buffer> <silent> ,pp :call SendParagraphToR("silent", "stay")
vnoremap <buffer> <silent> ,sa :call SendSelectionToR("echo", "down")
vnoremap <buffer> <silent> ,se :call SendSelectionToR("echo", "stay")
vnoremap <buffer> <silent> ,ss :call SendSelectionToR("silent", "stay")
noremap <buffer> <silent> ,ba :call SendMBlockToR("echo", "down")
noremap <buffer> <silent> ,bd :call SendMBlockToR("silent", "down")
noremap <buffer> <silent> ,be :call SendMBlockToR("echo", "stay")
noremap <buffer> <silent> ,bb :call SendMBlockToR("silent", "stay")
let s:cpo_save=&cpo
set cpo&vim
nmap <buffer> ,xi <Plug>(pandoc-hypertext-goto-id)
nmap <buffer> ,nr <Plug>(pandoc-keyboard-ref-insert)
vmap <buffer> ,_ <Plug>(pandoc-keyboard-toggle-subscript)
nmap <buffer> ,_ <Plug>(pandoc-keyboard-toggle-subscript)
vmap <buffer> ,^ <Plug>(pandoc-keyboard-toggle-superscript)
nmap <buffer> ,^ <Plug>(pandoc-keyboard-toggle-superscript)
vmap <buffer> ,~~ <Plug>(pandoc-keyboard-toggle-strikeout)
nmap <buffer> ,~~ <Plug>(pandoc-keyboard-toggle-strikeout)
vmap <buffer> ,' <Plug>(pandoc-keyboard-toggle-verbatim)
nmap <buffer> ,' <Plug>(pandoc-keyboard-toggle-verbatim)
vmap <buffer> ,b <Plug>(pandoc-keyboard-toggle-strong)
nmap <buffer> ,b <Plug>(pandoc-keyboard-toggle-strong)
vmap <buffer> ,i <Plug>(pandoc-keyboard-toggle-emphasis)
nmap <buffer> ,i <Plug>(pandoc-keyboard-toggle-emphasis)
nmap <buffer> ,hcn <Plug>(pandoc-keyboard-nth-header-child)
nmap <buffer> ,hcl <Plug>(pandoc-keyboard-last-header-child)
nmap <buffer> ,hcf <Plug>(pandoc-keyboard-first-header-child)
nmap <buffer> ,hsb <Plug>(pandoc-keyboard-prev-header-sibling)
nmap <buffer> ,hsn <Plug>(pandoc-keyboard-next-header-sibling)
nmap <buffer> ,hp <Plug>(pandoc-keyboard-cur-header-parent)
nmap <buffer> ,hh <Plug>(pandoc-keyboard-cur-header)
nmap <buffer> ,hb <Plug>(pandoc-keyboard-prev-header)
nmap <buffer> ,hn <Plug>(pandoc-keyboard-next-header)
nmap <buffer> ,hd <Plug>(pandoc-keyboard-remove-header)
nmap <buffer> ,# <Plug>(pandoc-keyboard-apply-header)
nmap <buffer> ,lcn <Plug>(pandoc-keyboard-nth-li-child)
nmap <buffer> ,lcl <Plug>(pandoc-keyboard-last-li-child)
nmap <buffer> ,lcf <Plug>(pandoc-keyboard-first-li-child)
nmap <buffer> ,lsp <Plug>(pandoc-keyboard-prev-li-sibling)
nmap <buffer> ,lsn <Plug>(pandoc-keyboard-next-li-sibling)
nmap <buffer> ,llp <Plug>(pandoc-keyboard-cur-li-parent)
nmap <buffer> ,ll <Plug>(pandoc-keyboard-cur-li)
nmap <buffer> ,lp <Plug>(pandoc-keyboard-prev-li)
nmap <buffer> ,ln <Plug>(pandoc-keyboard-next-li)
nmap <buffer> [] <Plug>(pandoc-keyboard-rw-sect-end)
nmap <buffer> [[ <Plug>(pandoc-keyboard-rw-header)
nmap <buffer> ][ <Plug>(pandoc-keyboard-ff-sect-end)
nmap <buffer> ]] <Plug>(pandoc-keyboard-ff-header)
omap <buffer> apt :normal vapl
vmap <buffer> <silent> apt <Plug>(pandoc-keyboard-select-subscript-inclusive)
omap <buffer> apu :normal vapu
vmap <buffer> <silent> apu <Plug>(pandoc-keyboard-select-superscript-inclusive)
omap <buffer> apk :normal vapk
vmap <buffer> <silent> apk <Plug>(pandoc-keyboard-select-strikeout-inclusive)
omap <buffer> apv :normal vapv
vmap <buffer> <silent> apv <Plug>(pandoc-keyboard-select-verbatim-inclusive)
omap <buffer> aps :normal vaps
vmap <buffer> <silent> aps <Plug>(pandoc-keyboard-select-strong-inclusive)
omap <buffer> ape :normal vape
vmap <buffer> <silent> ape <Plug>(pandoc-keyboard-select-emphasis-inclusive)
omap <buffer> aS :normal VaS
vmap <buffer> aS <Plug>(pandoc-keyboard-select-section-inclusive)
nmap <buffer> <silent> gN :call b:PreviousRChunk()
nmap <buffer> <silent> gn :call b:NextRChunk()
nmap <buffer> gx <Plug>(pandoc-hypertext-open-system)
nmap <buffer> gf <Plug>(pandoc-hypertext-open-local)
omap <buffer> ipt :normal vipl
vmap <buffer> <silent> ipt <Plug>(pandoc-keyboard-select-subscript-exclusive)
omap <buffer> ipu :normal vipu
vmap <buffer> <silent> ipu <Plug>(pandoc-keyboard-select-superscript-exclusive)
omap <buffer> ipk :normal vipk
vmap <buffer> <silent> ipk <Plug>(pandoc-keyboard-select-strikeout-exclusive)
omap <buffer> ipv :normal vipv
vmap <buffer> <silent> ipv <Plug>(pandoc-keyboard-select-verbatim-exclusive)
omap <buffer> ips :normal vips
vmap <buffer> <silent> ips <Plug>(pandoc-keyboard-select-strong-exclusive)
omap <buffer> ipe :normal vipe
vmap <buffer> <silent> ipe <Plug>(pandoc-keyboard-select-emphasis-exclusive)
omap <buffer> iS :normal ViS
vmap <buffer> iS <Plug>(pandoc-keyboard-select-section-exclusive)
vnoremap <buffer> j gj
nnoremap <buffer> j gj
vnoremap <buffer> k gk
nnoremap <buffer> k gk
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-subscript) :set opfunc=pandoc#keyboard#styles#ToggleSubscriptg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-superscript) :set opfunc=pandoc#keyboard#styles#ToggleSuperscriptg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strikeout) :set opfunc=pandoc#keyboard#styles#ToggleStrikeoutg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-verbatim) :set opfunc=pandoc#keyboard#styles#ToggleVerbatimg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strong) :set opfunc=pandoc#keyboard#styles#ToggleStrongg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-emphasis) :set opfunc=pandoc#keyboard#styles#ToggleEmphasisg@
noremap <buffer> <silent> <Plug>RDSendLine :call SendLineToR("down")0
vnoremap <buffer> <silent> <Plug>RDSendSelection :call SendSelectionToR("silent", "down")
nnoremap <buffer> <silent> <Plug>(pandoc-hypertext-goto-id) :call pandoc#hypertext#GotoID()
nnoremap <buffer> <silent> <Plug>(pandoc-hypertext-open-system) :call pandoc#hypertext#OpenSystem()
nnoremap <buffer> <silent> <Plug>(pandoc-hypertext-open-local) :call pandoc#hypertext#OpenLocal()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ref-backfrom) :call pandoc#keyboard#references#BACKFROM_Ref()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ref-goto) :call pandoc#keyboard#references#GOTO_Ref()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ref-insert) :call pandoc#keyboard#references#Insert_Ref()a
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-subscript-exclusive) :call pandoc#keyboard#styles#SelectSubscript("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-subscript-inclusive) :call pandoc#keyboard#styles#SelectSubscript("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-subscript) :call pandoc#keyboard#styles#ToggleSubscript(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-subscript) :set opfunc=pandoc#keyboard#styles#ToggleSubscriptg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-superscript-exclusive) :call pandoc#keyboard#styles#SelectSuperscript("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-superscript-inclusive) :call pandoc#keyboard#styles#SelectSuperscript("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-superscript) :call pandoc#keyboard#styles#ToggleSuperscript(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-superscript) :set opfunc=pandoc#keyboard#styles#ToggleSuperscriptg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strikeout-exclusive) :call pandoc#keyboard#styles#SelectStrikeout("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strikeout-inclusive) :call pandoc#keyboard#styles#SelectStrikeout("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strikeout) :call pandoc#keyboard#styles#ToggleStrikeout(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strikeout) :set opfunc=pandoc#keyboard#styles#ToggleStrikeoutg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-verbatim-exclusive) :call pandoc#keyboard#styles#SelectVerbatim("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-verbatim-inclusive) :call pandoc#keyboard#styles#SelectVerbatim("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-verbatim) :call pandoc#keyboard#styles#ToggleVerbatim(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-verbatim) :set opfunc=pandoc#keyboard#styles#ToggleVerbatimg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strong-exclusive) :call pandoc#keyboard#styles#SelectStrong("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strong-inclusive) :call pandoc#keyboard#styles#SelectStrong("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strong) :call pandoc#keyboard#styles#ToggleStrong(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strong) :set opfunc=pandoc#keyboard#styles#ToggleStrongg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-emphasis-exclusive) :call pandoc#keyboard#styles#SelectEmphasis("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-emphasis-inclusive) :call pandoc#keyboard#styles#SelectEmphasis("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-emphasis) :call pandoc#keyboard#styles#ToggleEmphasis(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-emphasis) :set opfunc=pandoc#keyboard#styles#ToggleEmphasisg@
noremap <buffer> <silent> <Plug>(pandoc-keyboard-nth-header-child) :call pandoc#keyboard#sections#GotoNthChildHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-last-header-child) :call pandoc#keyboard#sections#LastChildHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-first-header-child) :call pandoc#keyboard#sections#FirstChildHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-header-sibling) :call pandoc#keyboard#sections#PrevSiblingHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-header-sibling) :call pandoc#keyboard#sections#NextSiblingHeader()
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-section-exclusive) :call pandoc#keyboard#sections#SelectSection('exclusive')
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-section-inclusive) :call pandoc#keyboard#sections#SelectSection('inclusive')
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-header-parent) :call pandoc#keyboard#sections#CurrentHeaderParent()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-header) :call pandoc#keyboard#sections#CurrentHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-rw-sect-end) :call pandoc#keyboard#sections#PrevSectionEnd(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ff-sect-end) :call pandoc#keyboard#sections#NextSectionEnd(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-rw-header) :call pandoc#keyboard#sections#BackwardHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ff-header) :call pandoc#keyboard#sections#ForwardHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-header) :call pandoc#keyboard#sections#PrevHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-header) :call pandoc#keyboard#sections#NextHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-remove-header) :call pandoc#keyboard#sections#RemoveHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-apply-header) :call pandoc#keyboard#sections#ApplyHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-nth-li-child) :call pandoc#keyboard#lists#GotoNthListItemChild(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-last-li-child) :call pandoc#keyboard#lists#LastListItemChild()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-first-li-child) :call pandoc#keyboard#lists#FirstListItemChild()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-li-sibling) :call pandoc#keyboard#lists#PrevListItemSibling()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-li-sibling) :call pandoc#keyboard#lists#NextListItemSibling()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-li-parent) :call pandoc#keyboard#lists#CurrentListItemParent()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-li) :call pandoc#keyboard#lists#CurrentListItem()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-li) :call pandoc#keyboard#lists#PrevListItem()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-li) :call pandoc#keyboard#lists#NextListItem()
imap <buffer> <silent>  =RCompleteArgs()
inoremap <buffer> <silent> ,ca :call b:SendChunkToR("echo", "down")a
inoremap <buffer> <silent> ,cd :call b:SendChunkToR("silent", "down")a
inoremap <buffer> <silent> ,ce :call b:SendChunkToR("echo", "stay")a
inoremap <buffer> <silent> ,cc :call b:SendChunkToR("silent", "stay")a
inoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")a
inoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()a
inoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")a
inoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")a
inoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")a
inoremap <buffer> <silent> ,kn :call RKnit()a
inoremap <buffer> <silent> ,rd :call RSetWD()a
inoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)a
inoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)a
inoremap <buffer> <silent> ,ro :call RObjBrowser()a
inoremap <buffer> <silent> ,rb :call RAction("plotsumm")a
inoremap <buffer> <silent> ,rg :call RAction("plot")a
inoremap <buffer> <silent> ,rs :call RAction("summary")a
inoremap <buffer> <silent> ,rh :call RAction("help")a
inoremap <buffer> <silent> ,re :call RAction("example")a
inoremap <buffer> <silent> ,ra :call RAction("args")a
inoremap <buffer> <silent> ,rt :call RAction("str")a
inoremap <buffer> <silent> ,rn :call RAction("vim.names")a
inoremap <buffer> <silent> ,rp :call RAction("print")a
inoremap <buffer> <silent> ,rm :call RClearAll()a
inoremap <buffer> <silent> ,rr :call RClearConsole()a
inoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")a
imap <buffer> <silent> ,r<Right> l:call RSendPartOfLine("right", 0)i
imap <buffer> <silent> ,r<Left> l:call RSendPartOfLine("left", 0)i
inoremap <buffer> <silent> ,q :call SendLineToR("newline")a
inoremap <buffer> <silent> ,o :call SendLineToRAndInsertOutput()0i
inoremap <buffer> <silent> ,d :call SendLineToR("down")0i
inoremap <buffer> <silent> ,l :call SendLineToR("stay")a
inoremap <buffer> <silent> ,ch :call SendFHChunkToR()a
inoremap <buffer> <silent> ,pa :call SendParagraphToR("echo", "down")a
inoremap <buffer> <silent> ,pd :call SendParagraphToR("silent", "down")a
inoremap <buffer> <silent> ,pe :call SendParagraphToR("echo", "stay")a
inoremap <buffer> <silent> ,pp :call SendParagraphToR("silent", "stay")a
inoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")a
inoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")a
inoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")a
inoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")a
inoremap <buffer> <silent> ,ba :call SendMBlockToR("echo", "down")a
inoremap <buffer> <silent> ,bd :call SendMBlockToR("silent", "down")a
inoremap <buffer> <silent> ,be :call SendMBlockToR("echo", "stay")a
inoremap <buffer> <silent> ,bb :call SendMBlockToR("silent", "stay")a
inoremap <buffer> <silent> ,; :call MovePosRCodeComment("normal")a
inoremap <buffer> <silent> ,xu :call RSimpleCommentLine("normal", "u")a
inoremap <buffer> <silent> ,xc :call RSimpleCommentLine("normal", "c")a
inoremap <buffer> <silent> ,xx :call RComment("normal")a
inoremap <buffer> <silent> ,rw :call RQuit('save')a
inoremap <buffer> <silent> ,rq :call RQuit('nosave')a
inoremap <buffer> <silent> ,rc :call StartR("custom")a
inoremap <buffer> <silent> ,rv :call StartR("vanilla")a
inoremap <buffer> <silent> ,rf :call StartR("R")a
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=2
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=pandoc\ -t\ markdown\ --reference-links\ --no-wrap
setlocal errorformat=
setlocal expandtab
if &filetype != 'pandoc'
setlocal filetype=pandoc
endif
set foldcolumn=6
setlocal foldcolumn=3
setlocal foldenable
setlocal foldexpr=pandoc#folding#FoldExpr()
setlocal foldignore=#
setlocal foldlevel=1
setlocal foldmarker={{{,}}}
set foldmethod=marker
setlocal foldmethod=expr
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=pandoc#folding#FoldText()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetRmdIndent()
setlocal indentkeys=0{,0},:,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=48-57,a-z,A-Z,192-255
setlocal keywordprg=
setlocal linebreak
setlocal nolisp
set list
setlocal list
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=pandoc#completion#Complete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal spell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%{lightline#link()}%#LightLineLeft_inactive_0#%(\ %t\ %)%#LightLineLeft_inactive_0_1#â–¶%#LightLineMiddle_inactive#%=%#LightLineRight_inactive_1_2#â–¶%#LightLineRight_inactive_1#%(\ %3p%%\ %)%#LightLineRight_inactive_0_1#â–¶%#LightLineRight_inactive_0#%(\ %3l:%-2v\ %)
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'pandoc'
setlocal syntax=pandoc
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
let s:l = 53 - ((0 * winheight(0) + 7) / 14)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
53
normal! 0
lcd ~/Documents/data_intensive/book/ch4_probability
wincmd w
argglobal
edit ~/Documents/data_intensive/book/ch7_subjects/ch_learning_subjects.rmd
vnoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")
vnoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()
vnoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")
vnoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")
vnoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")
vnoremap <buffer> <silent> ,kn :call RKnit()
vnoremap <buffer> <silent> ,rd :call RSetWD()
vnoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)
vnoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)
vnoremap <buffer> <silent> ,ro :call RObjBrowser()
vnoremap <buffer> <silent> ,rb :call RAction("plotsumm")
vnoremap <buffer> <silent> ,rg :call RAction("plot")
vnoremap <buffer> <silent> ,rs :call RAction("summary")
vnoremap <buffer> <silent> ,rh :call RAction("help")
vnoremap <buffer> <silent> ,re :call RAction("example")
vnoremap <buffer> <silent> ,ra :call RAction("args")
vnoremap <buffer> <silent> ,rt :call RAction("str")
vnoremap <buffer> <silent> ,rn :call RAction("vim.names")
vnoremap <buffer> <silent> ,rp :call RAction("print")
vnoremap <buffer> <silent> ,rm :call RClearAll()
vnoremap <buffer> <silent> ,rr :call RClearConsole()
vnoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")
vnoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")
vnoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")
vnoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")
vnoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")
vnoremap <buffer> <silent> ,; :call MovePosRCodeComment("selection")
vnoremap <buffer> <silent> ,xu :call RSimpleCommentLine("selection", "u")
vnoremap <buffer> <silent> ,xc :call RSimpleCommentLine("selection", "c")
vnoremap <buffer> <silent> ,xx :call RComment("selection")
vnoremap <buffer> <silent> ,rw :call RQuit('save')
vnoremap <buffer> <silent> ,rq :call RQuit('nosave')
vnoremap <buffer> <silent> ,rc :call StartR("custom")
vnoremap <buffer> <silent> ,rv :call StartR("vanilla")
vnoremap <buffer> <silent> ,rf :call StartR("R")
nnoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")
onoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")
nnoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()
onoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()
nnoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")
onoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")
nnoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")
onoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")
nnoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")
onoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")
nnoremap <buffer> <silent> ,kn :call RKnit()
onoremap <buffer> <silent> ,kn :call RKnit()
nnoremap <buffer> <silent> ,rd :call RSetWD()
onoremap <buffer> <silent> ,rd :call RSetWD()
nnoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)
onoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)
nnoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)
onoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)
nnoremap <buffer> <silent> ,ro :call RObjBrowser()
onoremap <buffer> <silent> ,ro :call RObjBrowser()
nnoremap <buffer> <silent> ,rb :call RAction("plotsumm")
onoremap <buffer> <silent> ,rb :call RAction("plotsumm")
nnoremap <buffer> <silent> ,rg :call RAction("plot")
onoremap <buffer> <silent> ,rg :call RAction("plot")
nnoremap <buffer> <silent> ,rs :call RAction("summary")
onoremap <buffer> <silent> ,rs :call RAction("summary")
nnoremap <buffer> <silent> ,rh :call RAction("help")
onoremap <buffer> <silent> ,rh :call RAction("help")
nnoremap <buffer> <silent> ,re :call RAction("example")
onoremap <buffer> <silent> ,re :call RAction("example")
nnoremap <buffer> <silent> ,ra :call RAction("args")
onoremap <buffer> <silent> ,ra :call RAction("args")
nnoremap <buffer> <silent> ,rt :call RAction("str")
onoremap <buffer> <silent> ,rt :call RAction("str")
nnoremap <buffer> <silent> ,rn :call RAction("vim.names")
onoremap <buffer> <silent> ,rn :call RAction("vim.names")
nnoremap <buffer> <silent> ,rp :call RAction("print")
onoremap <buffer> <silent> ,rp :call RAction("print")
nnoremap <buffer> <silent> ,rm :call RClearAll()
onoremap <buffer> <silent> ,rm :call RClearAll()
nnoremap <buffer> <silent> ,rr :call RClearConsole()
onoremap <buffer> <silent> ,rr :call RClearConsole()
nnoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")
onoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")
nnoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")
onoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")
nnoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")
onoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")
nnoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")
onoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")
nnoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")
onoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")
nnoremap <buffer> <silent> ,; :call MovePosRCodeComment("normal")
onoremap <buffer> <silent> ,; :call MovePosRCodeComment("normal")
nnoremap <buffer> <silent> ,xu :call RSimpleCommentLine("normal", "u")
onoremap <buffer> <silent> ,xu :call RSimpleCommentLine("normal", "u")
nnoremap <buffer> <silent> ,xc :call RSimpleCommentLine("normal", "c")
onoremap <buffer> <silent> ,xc :call RSimpleCommentLine("normal", "c")
nnoremap <buffer> <silent> ,xx :call RComment("normal")
onoremap <buffer> <silent> ,xx :call RComment("normal")
nnoremap <buffer> <silent> ,rw :call RQuit('save')
onoremap <buffer> <silent> ,rw :call RQuit('save')
nnoremap <buffer> <silent> ,rq :call RQuit('nosave')
onoremap <buffer> <silent> ,rq :call RQuit('nosave')
nnoremap <buffer> <silent> ,rc :call StartR("custom")
onoremap <buffer> <silent> ,rc :call StartR("custom")
nnoremap <buffer> <silent> ,rv :call StartR("vanilla")
onoremap <buffer> <silent> ,rv :call StartR("vanilla")
nnoremap <buffer> <silent> ,rf :call StartR("R")
onoremap <buffer> <silent> ,rf :call StartR("R")
noremap <buffer> <silent> ,ca :call b:SendChunkToR("echo", "down")
noremap <buffer> <silent> ,cd :call b:SendChunkToR("silent", "down")
noremap <buffer> <silent> ,ce :call b:SendChunkToR("echo", "stay")
noremap <buffer> <silent> ,cc :call b:SendChunkToR("silent", "stay")
noremap <buffer> <silent> ,o :call SendLineToRAndInsertOutput()0
noremap <buffer> <silent> ,l :call SendLineToR("stay")
noremap <buffer> <silent> ,ch :call SendFHChunkToR()
noremap <buffer> <silent> ,pa :call SendParagraphToR("echo", "down")
noremap <buffer> <silent> ,pd :call SendParagraphToR("silent", "down")
noremap <buffer> <silent> ,pe :call SendParagraphToR("echo", "stay")
noremap <buffer> <silent> ,pp :call SendParagraphToR("silent", "stay")
vnoremap <buffer> <silent> ,sa :call SendSelectionToR("echo", "down")
vnoremap <buffer> <silent> ,se :call SendSelectionToR("echo", "stay")
vnoremap <buffer> <silent> ,ss :call SendSelectionToR("silent", "stay")
noremap <buffer> <silent> ,ba :call SendMBlockToR("echo", "down")
noremap <buffer> <silent> ,bd :call SendMBlockToR("silent", "down")
noremap <buffer> <silent> ,be :call SendMBlockToR("echo", "stay")
noremap <buffer> <silent> ,bb :call SendMBlockToR("silent", "stay")
let s:cpo_save=&cpo
set cpo&vim
nmap <buffer> ,xi <Plug>(pandoc-hypertext-goto-id)
nmap <buffer> ,nr <Plug>(pandoc-keyboard-ref-insert)
vmap <buffer> ,_ <Plug>(pandoc-keyboard-toggle-subscript)
nmap <buffer> ,_ <Plug>(pandoc-keyboard-toggle-subscript)
vmap <buffer> ,^ <Plug>(pandoc-keyboard-toggle-superscript)
nmap <buffer> ,^ <Plug>(pandoc-keyboard-toggle-superscript)
vmap <buffer> ,~~ <Plug>(pandoc-keyboard-toggle-strikeout)
nmap <buffer> ,~~ <Plug>(pandoc-keyboard-toggle-strikeout)
vmap <buffer> ,' <Plug>(pandoc-keyboard-toggle-verbatim)
nmap <buffer> ,' <Plug>(pandoc-keyboard-toggle-verbatim)
vmap <buffer> ,b <Plug>(pandoc-keyboard-toggle-strong)
nmap <buffer> ,b <Plug>(pandoc-keyboard-toggle-strong)
vmap <buffer> ,i <Plug>(pandoc-keyboard-toggle-emphasis)
nmap <buffer> ,i <Plug>(pandoc-keyboard-toggle-emphasis)
nmap <buffer> ,hcn <Plug>(pandoc-keyboard-nth-header-child)
nmap <buffer> ,hcl <Plug>(pandoc-keyboard-last-header-child)
nmap <buffer> ,hcf <Plug>(pandoc-keyboard-first-header-child)
nmap <buffer> ,hsb <Plug>(pandoc-keyboard-prev-header-sibling)
nmap <buffer> ,hsn <Plug>(pandoc-keyboard-next-header-sibling)
nmap <buffer> ,hp <Plug>(pandoc-keyboard-cur-header-parent)
nmap <buffer> ,hh <Plug>(pandoc-keyboard-cur-header)
nmap <buffer> ,hb <Plug>(pandoc-keyboard-prev-header)
nmap <buffer> ,hn <Plug>(pandoc-keyboard-next-header)
nmap <buffer> ,hd <Plug>(pandoc-keyboard-remove-header)
nmap <buffer> ,# <Plug>(pandoc-keyboard-apply-header)
nmap <buffer> ,lcn <Plug>(pandoc-keyboard-nth-li-child)
nmap <buffer> ,lcl <Plug>(pandoc-keyboard-last-li-child)
nmap <buffer> ,lcf <Plug>(pandoc-keyboard-first-li-child)
nmap <buffer> ,lsp <Plug>(pandoc-keyboard-prev-li-sibling)
nmap <buffer> ,lsn <Plug>(pandoc-keyboard-next-li-sibling)
nmap <buffer> ,llp <Plug>(pandoc-keyboard-cur-li-parent)
nmap <buffer> ,ll <Plug>(pandoc-keyboard-cur-li)
nmap <buffer> ,lp <Plug>(pandoc-keyboard-prev-li)
nmap <buffer> ,ln <Plug>(pandoc-keyboard-next-li)
nmap <buffer> [] <Plug>(pandoc-keyboard-rw-sect-end)
nmap <buffer> [[ <Plug>(pandoc-keyboard-rw-header)
nmap <buffer> ][ <Plug>(pandoc-keyboard-ff-sect-end)
nmap <buffer> ]] <Plug>(pandoc-keyboard-ff-header)
omap <buffer> apt :normal vapl
vmap <buffer> <silent> apt <Plug>(pandoc-keyboard-select-subscript-inclusive)
omap <buffer> apu :normal vapu
vmap <buffer> <silent> apu <Plug>(pandoc-keyboard-select-superscript-inclusive)
omap <buffer> apk :normal vapk
vmap <buffer> <silent> apk <Plug>(pandoc-keyboard-select-strikeout-inclusive)
omap <buffer> apv :normal vapv
vmap <buffer> <silent> apv <Plug>(pandoc-keyboard-select-verbatim-inclusive)
omap <buffer> aps :normal vaps
vmap <buffer> <silent> aps <Plug>(pandoc-keyboard-select-strong-inclusive)
omap <buffer> ape :normal vape
vmap <buffer> <silent> ape <Plug>(pandoc-keyboard-select-emphasis-inclusive)
omap <buffer> aS :normal VaS
vmap <buffer> aS <Plug>(pandoc-keyboard-select-section-inclusive)
nmap <buffer> <silent> gN :call b:PreviousRChunk()
nmap <buffer> <silent> gn :call b:NextRChunk()
nmap <buffer> gx <Plug>(pandoc-hypertext-open-system)
nmap <buffer> gf <Plug>(pandoc-hypertext-open-local)
omap <buffer> ipt :normal vipl
vmap <buffer> <silent> ipt <Plug>(pandoc-keyboard-select-subscript-exclusive)
omap <buffer> ipu :normal vipu
vmap <buffer> <silent> ipu <Plug>(pandoc-keyboard-select-superscript-exclusive)
omap <buffer> ipk :normal vipk
vmap <buffer> <silent> ipk <Plug>(pandoc-keyboard-select-strikeout-exclusive)
omap <buffer> ipv :normal vipv
vmap <buffer> <silent> ipv <Plug>(pandoc-keyboard-select-verbatim-exclusive)
omap <buffer> ips :normal vips
vmap <buffer> <silent> ips <Plug>(pandoc-keyboard-select-strong-exclusive)
omap <buffer> ipe :normal vipe
vmap <buffer> <silent> ipe <Plug>(pandoc-keyboard-select-emphasis-exclusive)
omap <buffer> iS :normal ViS
vmap <buffer> iS <Plug>(pandoc-keyboard-select-section-exclusive)
vnoremap <buffer> j gj
nnoremap <buffer> j gj
vnoremap <buffer> k gk
nnoremap <buffer> k gk
noremap <buffer> <silent> <Plug>RDSendLine :call SendLineToR("down")0
vnoremap <buffer> <silent> <Plug>RDSendSelection :call SendSelectionToR("silent", "down")
nnoremap <buffer> <silent> <Plug>(pandoc-hypertext-goto-id) :call pandoc#hypertext#GotoID()
nnoremap <buffer> <silent> <Plug>(pandoc-hypertext-open-system) :call pandoc#hypertext#OpenSystem()
nnoremap <buffer> <silent> <Plug>(pandoc-hypertext-open-local) :call pandoc#hypertext#OpenLocal()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ref-backfrom) :call pandoc#keyboard#references#BACKFROM_Ref()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ref-goto) :call pandoc#keyboard#references#GOTO_Ref()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ref-insert) :call pandoc#keyboard#references#Insert_Ref()a
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-subscript-exclusive) :call pandoc#keyboard#styles#SelectSubscript("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-subscript-inclusive) :call pandoc#keyboard#styles#SelectSubscript("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-subscript) :call pandoc#keyboard#styles#ToggleSubscript(visualmode())
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-subscript) :set opfunc=pandoc#keyboard#styles#ToggleSubscriptg@
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-subscript) :set opfunc=pandoc#keyboard#styles#ToggleSubscriptg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-superscript-exclusive) :call pandoc#keyboard#styles#SelectSuperscript("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-superscript-inclusive) :call pandoc#keyboard#styles#SelectSuperscript("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-superscript) :call pandoc#keyboard#styles#ToggleSuperscript(visualmode())
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-superscript) :set opfunc=pandoc#keyboard#styles#ToggleSuperscriptg@
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-superscript) :set opfunc=pandoc#keyboard#styles#ToggleSuperscriptg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strikeout-exclusive) :call pandoc#keyboard#styles#SelectStrikeout("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strikeout-inclusive) :call pandoc#keyboard#styles#SelectStrikeout("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strikeout) :call pandoc#keyboard#styles#ToggleStrikeout(visualmode())
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strikeout) :set opfunc=pandoc#keyboard#styles#ToggleStrikeoutg@
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strikeout) :set opfunc=pandoc#keyboard#styles#ToggleStrikeoutg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-verbatim-exclusive) :call pandoc#keyboard#styles#SelectVerbatim("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-verbatim-inclusive) :call pandoc#keyboard#styles#SelectVerbatim("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-verbatim) :call pandoc#keyboard#styles#ToggleVerbatim(visualmode())
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-verbatim) :set opfunc=pandoc#keyboard#styles#ToggleVerbatimg@
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-verbatim) :set opfunc=pandoc#keyboard#styles#ToggleVerbatimg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strong-exclusive) :call pandoc#keyboard#styles#SelectStrong("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strong-inclusive) :call pandoc#keyboard#styles#SelectStrong("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strong) :call pandoc#keyboard#styles#ToggleStrong(visualmode())
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strong) :set opfunc=pandoc#keyboard#styles#ToggleStrongg@
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strong) :set opfunc=pandoc#keyboard#styles#ToggleStrongg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-emphasis-exclusive) :call pandoc#keyboard#styles#SelectEmphasis("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-emphasis-inclusive) :call pandoc#keyboard#styles#SelectEmphasis("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-emphasis) :call pandoc#keyboard#styles#ToggleEmphasis(visualmode())
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-emphasis) :set opfunc=pandoc#keyboard#styles#ToggleEmphasisg@
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-emphasis) :set opfunc=pandoc#keyboard#styles#ToggleEmphasisg@
noremap <buffer> <silent> <Plug>(pandoc-keyboard-nth-header-child) :call pandoc#keyboard#sections#GotoNthChildHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-last-header-child) :call pandoc#keyboard#sections#LastChildHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-first-header-child) :call pandoc#keyboard#sections#FirstChildHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-header-sibling) :call pandoc#keyboard#sections#PrevSiblingHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-header-sibling) :call pandoc#keyboard#sections#NextSiblingHeader()
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-section-exclusive) :call pandoc#keyboard#sections#SelectSection('exclusive')
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-section-inclusive) :call pandoc#keyboard#sections#SelectSection('inclusive')
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-header-parent) :call pandoc#keyboard#sections#CurrentHeaderParent()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-header) :call pandoc#keyboard#sections#CurrentHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-rw-sect-end) :call pandoc#keyboard#sections#PrevSectionEnd(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ff-sect-end) :call pandoc#keyboard#sections#NextSectionEnd(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-rw-header) :call pandoc#keyboard#sections#BackwardHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ff-header) :call pandoc#keyboard#sections#ForwardHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-header) :call pandoc#keyboard#sections#PrevHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-header) :call pandoc#keyboard#sections#NextHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-remove-header) :call pandoc#keyboard#sections#RemoveHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-apply-header) :call pandoc#keyboard#sections#ApplyHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-nth-li-child) :call pandoc#keyboard#lists#GotoNthListItemChild(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-last-li-child) :call pandoc#keyboard#lists#LastListItemChild()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-first-li-child) :call pandoc#keyboard#lists#FirstListItemChild()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-li-sibling) :call pandoc#keyboard#lists#PrevListItemSibling()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-li-sibling) :call pandoc#keyboard#lists#NextListItemSibling()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-li-parent) :call pandoc#keyboard#lists#CurrentListItemParent()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-li) :call pandoc#keyboard#lists#CurrentListItem()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-li) :call pandoc#keyboard#lists#PrevListItem()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-li) :call pandoc#keyboard#lists#NextListItem()
imap <buffer> <silent>  =RCompleteArgs()
inoremap <buffer> <silent> ,ca :call b:SendChunkToR("echo", "down")a
inoremap <buffer> <silent> ,cd :call b:SendChunkToR("silent", "down")a
inoremap <buffer> <silent> ,ce :call b:SendChunkToR("echo", "stay")a
inoremap <buffer> <silent> ,cc :call b:SendChunkToR("silent", "stay")a
inoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")a
inoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()a
inoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")a
inoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")a
inoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")a
inoremap <buffer> <silent> ,kn :call RKnit()a
inoremap <buffer> <silent> ,rd :call RSetWD()a
inoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)a
inoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)a
inoremap <buffer> <silent> ,ro :call RObjBrowser()a
inoremap <buffer> <silent> ,rb :call RAction("plotsumm")a
inoremap <buffer> <silent> ,rg :call RAction("plot")a
inoremap <buffer> <silent> ,rs :call RAction("summary")a
inoremap <buffer> <silent> ,rh :call RAction("help")a
inoremap <buffer> <silent> ,re :call RAction("example")a
inoremap <buffer> <silent> ,ra :call RAction("args")a
inoremap <buffer> <silent> ,rt :call RAction("str")a
inoremap <buffer> <silent> ,rn :call RAction("vim.names")a
inoremap <buffer> <silent> ,rp :call RAction("print")a
inoremap <buffer> <silent> ,rm :call RClearAll()a
inoremap <buffer> <silent> ,rr :call RClearConsole()a
inoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")a
imap <buffer> <silent> ,r<Right> l:call RSendPartOfLine("right", 0)i
imap <buffer> <silent> ,r<Left> l:call RSendPartOfLine("left", 0)i
inoremap <buffer> <silent> ,q :call SendLineToR("newline")a
inoremap <buffer> <silent> ,o :call SendLineToRAndInsertOutput()0i
inoremap <buffer> <silent> ,d :call SendLineToR("down")0i
inoremap <buffer> <silent> ,l :call SendLineToR("stay")a
inoremap <buffer> <silent> ,ch :call SendFHChunkToR()a
inoremap <buffer> <silent> ,pa :call SendParagraphToR("echo", "down")a
inoremap <buffer> <silent> ,pd :call SendParagraphToR("silent", "down")a
inoremap <buffer> <silent> ,pe :call SendParagraphToR("echo", "stay")a
inoremap <buffer> <silent> ,pp :call SendParagraphToR("silent", "stay")a
inoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")a
inoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")a
inoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")a
inoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")a
inoremap <buffer> <silent> ,ba :call SendMBlockToR("echo", "down")a
inoremap <buffer> <silent> ,bd :call SendMBlockToR("silent", "down")a
inoremap <buffer> <silent> ,be :call SendMBlockToR("echo", "stay")a
inoremap <buffer> <silent> ,bb :call SendMBlockToR("silent", "stay")a
inoremap <buffer> <silent> ,; :call MovePosRCodeComment("normal")a
inoremap <buffer> <silent> ,xu :call RSimpleCommentLine("normal", "u")a
inoremap <buffer> <silent> ,xc :call RSimpleCommentLine("normal", "c")a
inoremap <buffer> <silent> ,xx :call RComment("normal")a
inoremap <buffer> <silent> ,rw :call RQuit('save')a
inoremap <buffer> <silent> ,rq :call RQuit('nosave')a
inoremap <buffer> <silent> ,rc :call StartR("custom")a
inoremap <buffer> <silent> ,rv :call StartR("vanilla")a
inoremap <buffer> <silent> ,rf :call StartR("R")a
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=2
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=pandoc\ -t\ markdown\ --reference-links\ --no-wrap
setlocal errorformat=
setlocal expandtab
if &filetype != 'pandoc'
setlocal filetype=pandoc
endif
set foldcolumn=6
setlocal foldcolumn=3
setlocal foldenable
setlocal foldexpr=pandoc#folding#FoldExpr()
setlocal foldignore=#
setlocal foldlevel=4
setlocal foldmarker={{{,}}}
set foldmethod=marker
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=pandoc#folding#FoldText()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetRmdIndent()
setlocal indentkeys=0{,0},:,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=48-57,a-z,A-Z,192-255
setlocal keywordprg=
setlocal linebreak
setlocal nolisp
set list
setlocal list
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=pandoc#completion#Complete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal spell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%{lightline#link()}%#LightLineLeft_inactive_0#%(\ %t\ %)%#LightLineLeft_inactive_0_1#â–¶%#LightLineMiddle_inactive#%=%#LightLineRight_inactive_1_2#â–¶%#LightLineRight_inactive_1#%(\ %3p%%\ %)%#LightLineRight_inactive_0_1#â–¶%#LightLineRight_inactive_0#%(\ %3l:%-2v\ %)
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'pandoc'
setlocal syntax=pandoc
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
silent! normal! zE
7,20fold
21,27fold
28,41fold
42,53fold
54,66fold
67,69fold
1,69fold
1
normal! zo
let s:l = 2 - ((0 * winheight(0) + 7) / 14)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
2
normal! 0
lcd ~/Documents/data_intensive/book/ch7_subjects
wincmd w
argglobal
edit ~/Documents/data_intensive/book/ch6_reconstruction/ch_reconstruction_number.rmd
nnoremap <buffer> <silent> ,rf :call StartR("R")
nnoremap <buffer> <silent> ,rv :call StartR("vanilla")
nnoremap <buffer> <silent> ,rc :call StartR("custom")
nnoremap <buffer> <silent> ,rq :call RQuit('nosave')
nnoremap <buffer> <silent> ,rw :call RQuit('save')
nnoremap <buffer> <silent> ,xx :call RComment("normal")
nnoremap <buffer> <silent> ,xc :call RSimpleCommentLine("normal", "c")
nnoremap <buffer> <silent> ,xu :call RSimpleCommentLine("normal", "u")
nnoremap <buffer> <silent> ,; :call MovePosRCodeComment("normal")
nnoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")
nnoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")
nnoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")
nnoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")
nnoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")
nnoremap <buffer> <silent> ,rr :call RClearConsole()
nnoremap <buffer> <silent> ,rm :call RClearAll()
nnoremap <buffer> <silent> ,rp :call RAction("print")
nnoremap <buffer> <silent> ,rn :call RAction("vim.names")
nnoremap <buffer> <silent> ,rt :call RAction("str")
nnoremap <buffer> <silent> ,ra :call RAction("args")
nnoremap <buffer> <silent> ,re :call RAction("example")
nnoremap <buffer> <silent> ,rh :call RAction("help")
nnoremap <buffer> <silent> ,rs :call RAction("summary")
nnoremap <buffer> <silent> ,rg :call RAction("plot")
nnoremap <buffer> <silent> ,rb :call RAction("plotsumm")
nnoremap <buffer> <silent> ,ro :call RObjBrowser()
nnoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)
nnoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)
nnoremap <buffer> <silent> ,rd :call RSetWD()
nnoremap <buffer> <silent> ,kn :call RKnit()
nnoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")
nnoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")
nnoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")
nnoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()
nnoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")
vnoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")
vnoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()
vnoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")
vnoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")
vnoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")
vnoremap <buffer> <silent> ,kn :call RKnit()
vnoremap <buffer> <silent> ,rd :call RSetWD()
vnoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)
vnoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)
vnoremap <buffer> <silent> ,ro :call RObjBrowser()
vnoremap <buffer> <silent> ,rb :call RAction("plotsumm")
vnoremap <buffer> <silent> ,rg :call RAction("plot")
vnoremap <buffer> <silent> ,rs :call RAction("summary")
vnoremap <buffer> <silent> ,rh :call RAction("help")
vnoremap <buffer> <silent> ,re :call RAction("example")
vnoremap <buffer> <silent> ,ra :call RAction("args")
vnoremap <buffer> <silent> ,rt :call RAction("str")
vnoremap <buffer> <silent> ,rn :call RAction("vim.names")
vnoremap <buffer> <silent> ,rp :call RAction("print")
vnoremap <buffer> <silent> ,rm :call RClearAll()
vnoremap <buffer> <silent> ,rr :call RClearConsole()
vnoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")
vnoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")
vnoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")
vnoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")
vnoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")
vnoremap <buffer> <silent> ,; :call MovePosRCodeComment("selection")
vnoremap <buffer> <silent> ,xu :call RSimpleCommentLine("selection", "u")
vnoremap <buffer> <silent> ,xc :call RSimpleCommentLine("selection", "c")
vnoremap <buffer> <silent> ,xx :call RComment("selection")
vnoremap <buffer> <silent> ,rw :call RQuit('save')
vnoremap <buffer> <silent> ,rq :call RQuit('nosave')
vnoremap <buffer> <silent> ,rc :call StartR("custom")
vnoremap <buffer> <silent> ,rv :call StartR("vanilla")
vnoremap <buffer> <silent> ,rf :call StartR("R")
onoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")
onoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()
onoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")
onoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")
onoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")
onoremap <buffer> <silent> ,kn :call RKnit()
onoremap <buffer> <silent> ,rd :call RSetWD()
onoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)
onoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)
onoremap <buffer> <silent> ,ro :call RObjBrowser()
onoremap <buffer> <silent> ,rb :call RAction("plotsumm")
onoremap <buffer> <silent> ,rg :call RAction("plot")
onoremap <buffer> <silent> ,rs :call RAction("summary")
onoremap <buffer> <silent> ,rh :call RAction("help")
onoremap <buffer> <silent> ,re :call RAction("example")
onoremap <buffer> <silent> ,ra :call RAction("args")
onoremap <buffer> <silent> ,rt :call RAction("str")
onoremap <buffer> <silent> ,rn :call RAction("vim.names")
onoremap <buffer> <silent> ,rp :call RAction("print")
onoremap <buffer> <silent> ,rm :call RClearAll()
onoremap <buffer> <silent> ,rr :call RClearConsole()
onoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")
onoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")
onoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")
onoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")
onoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")
onoremap <buffer> <silent> ,; :call MovePosRCodeComment("normal")
onoremap <buffer> <silent> ,xu :call RSimpleCommentLine("normal", "u")
onoremap <buffer> <silent> ,xc :call RSimpleCommentLine("normal", "c")
onoremap <buffer> <silent> ,xx :call RComment("normal")
onoremap <buffer> <silent> ,rw :call RQuit('save')
onoremap <buffer> <silent> ,rq :call RQuit('nosave')
onoremap <buffer> <silent> ,rc :call StartR("custom")
onoremap <buffer> <silent> ,rv :call StartR("vanilla")
onoremap <buffer> <silent> ,rf :call StartR("R")
noremap <buffer> <silent> ,ca :call b:SendChunkToR("echo", "down")
noremap <buffer> <silent> ,cd :call b:SendChunkToR("silent", "down")
noremap <buffer> <silent> ,ce :call b:SendChunkToR("echo", "stay")
noremap <buffer> <silent> ,cc :call b:SendChunkToR("silent", "stay")
noremap <buffer> <silent> ,o :call SendLineToRAndInsertOutput()0
noremap <buffer> <silent> ,l :call SendLineToR("stay")
noremap <buffer> <silent> ,ch :call SendFHChunkToR()
noremap <buffer> <silent> ,pa :call SendParagraphToR("echo", "down")
noremap <buffer> <silent> ,pd :call SendParagraphToR("silent", "down")
noremap <buffer> <silent> ,pe :call SendParagraphToR("echo", "stay")
noremap <buffer> <silent> ,pp :call SendParagraphToR("silent", "stay")
vnoremap <buffer> <silent> ,sa :call SendSelectionToR("echo", "down")
vnoremap <buffer> <silent> ,se :call SendSelectionToR("echo", "stay")
vnoremap <buffer> <silent> ,ss :call SendSelectionToR("silent", "stay")
noremap <buffer> <silent> ,ba :call SendMBlockToR("echo", "down")
noremap <buffer> <silent> ,bd :call SendMBlockToR("silent", "down")
noremap <buffer> <silent> ,be :call SendMBlockToR("echo", "stay")
noremap <buffer> <silent> ,bb :call SendMBlockToR("silent", "stay")
let s:cpo_save=&cpo
set cpo&vim
nmap <buffer> ,xi <Plug>(pandoc-hypertext-goto-id)
nmap <buffer> ,nr <Plug>(pandoc-keyboard-ref-insert)
vmap <buffer> ,_ <Plug>(pandoc-keyboard-toggle-subscript)
nmap <buffer> ,_ <Plug>(pandoc-keyboard-toggle-subscript)
vmap <buffer> ,^ <Plug>(pandoc-keyboard-toggle-superscript)
nmap <buffer> ,^ <Plug>(pandoc-keyboard-toggle-superscript)
vmap <buffer> ,~~ <Plug>(pandoc-keyboard-toggle-strikeout)
nmap <buffer> ,~~ <Plug>(pandoc-keyboard-toggle-strikeout)
vmap <buffer> ,' <Plug>(pandoc-keyboard-toggle-verbatim)
nmap <buffer> ,' <Plug>(pandoc-keyboard-toggle-verbatim)
vmap <buffer> ,b <Plug>(pandoc-keyboard-toggle-strong)
nmap <buffer> ,b <Plug>(pandoc-keyboard-toggle-strong)
vmap <buffer> ,i <Plug>(pandoc-keyboard-toggle-emphasis)
nmap <buffer> ,i <Plug>(pandoc-keyboard-toggle-emphasis)
nmap <buffer> ,hcn <Plug>(pandoc-keyboard-nth-header-child)
nmap <buffer> ,hcl <Plug>(pandoc-keyboard-last-header-child)
nmap <buffer> ,hcf <Plug>(pandoc-keyboard-first-header-child)
nmap <buffer> ,hsb <Plug>(pandoc-keyboard-prev-header-sibling)
nmap <buffer> ,hsn <Plug>(pandoc-keyboard-next-header-sibling)
nmap <buffer> ,hp <Plug>(pandoc-keyboard-cur-header-parent)
nmap <buffer> ,hh <Plug>(pandoc-keyboard-cur-header)
nmap <buffer> ,hb <Plug>(pandoc-keyboard-prev-header)
nmap <buffer> ,hn <Plug>(pandoc-keyboard-next-header)
nmap <buffer> ,hd <Plug>(pandoc-keyboard-remove-header)
nmap <buffer> ,# <Plug>(pandoc-keyboard-apply-header)
nmap <buffer> ,lcn <Plug>(pandoc-keyboard-nth-li-child)
nmap <buffer> ,lcl <Plug>(pandoc-keyboard-last-li-child)
nmap <buffer> ,lcf <Plug>(pandoc-keyboard-first-li-child)
nmap <buffer> ,lsp <Plug>(pandoc-keyboard-prev-li-sibling)
nmap <buffer> ,lsn <Plug>(pandoc-keyboard-next-li-sibling)
nmap <buffer> ,llp <Plug>(pandoc-keyboard-cur-li-parent)
nmap <buffer> ,ll <Plug>(pandoc-keyboard-cur-li)
nmap <buffer> ,lp <Plug>(pandoc-keyboard-prev-li)
nmap <buffer> ,ln <Plug>(pandoc-keyboard-next-li)
nmap <buffer> [] <Plug>(pandoc-keyboard-rw-sect-end)
nmap <buffer> [[ <Plug>(pandoc-keyboard-rw-header)
nmap <buffer> ][ <Plug>(pandoc-keyboard-ff-sect-end)
nmap <buffer> ]] <Plug>(pandoc-keyboard-ff-header)
omap <buffer> apt :normal vapl
vmap <buffer> <silent> apt <Plug>(pandoc-keyboard-select-subscript-inclusive)
omap <buffer> apu :normal vapu
vmap <buffer> <silent> apu <Plug>(pandoc-keyboard-select-superscript-inclusive)
omap <buffer> apk :normal vapk
vmap <buffer> <silent> apk <Plug>(pandoc-keyboard-select-strikeout-inclusive)
omap <buffer> apv :normal vapv
vmap <buffer> <silent> apv <Plug>(pandoc-keyboard-select-verbatim-inclusive)
omap <buffer> aps :normal vaps
vmap <buffer> <silent> aps <Plug>(pandoc-keyboard-select-strong-inclusive)
omap <buffer> ape :normal vape
vmap <buffer> <silent> ape <Plug>(pandoc-keyboard-select-emphasis-inclusive)
omap <buffer> aS :normal VaS
vmap <buffer> aS <Plug>(pandoc-keyboard-select-section-inclusive)
nmap <buffer> <silent> gN :call b:PreviousRChunk()
nmap <buffer> <silent> gn :call b:NextRChunk()
nmap <buffer> gx <Plug>(pandoc-hypertext-open-system)
nmap <buffer> gf <Plug>(pandoc-hypertext-open-local)
omap <buffer> ipt :normal vipl
vmap <buffer> <silent> ipt <Plug>(pandoc-keyboard-select-subscript-exclusive)
omap <buffer> ipu :normal vipu
vmap <buffer> <silent> ipu <Plug>(pandoc-keyboard-select-superscript-exclusive)
omap <buffer> ipk :normal vipk
vmap <buffer> <silent> ipk <Plug>(pandoc-keyboard-select-strikeout-exclusive)
omap <buffer> ipv :normal vipv
vmap <buffer> <silent> ipv <Plug>(pandoc-keyboard-select-verbatim-exclusive)
omap <buffer> ips :normal vips
vmap <buffer> <silent> ips <Plug>(pandoc-keyboard-select-strong-exclusive)
omap <buffer> ipe :normal vipe
vmap <buffer> <silent> ipe <Plug>(pandoc-keyboard-select-emphasis-exclusive)
omap <buffer> iS :normal ViS
vmap <buffer> iS <Plug>(pandoc-keyboard-select-section-exclusive)
vnoremap <buffer> j gj
nnoremap <buffer> j gj
vnoremap <buffer> k gk
nnoremap <buffer> k gk
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-emphasis) :set opfunc=pandoc#keyboard#styles#ToggleEmphasisg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strong) :set opfunc=pandoc#keyboard#styles#ToggleStrongg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-verbatim) :set opfunc=pandoc#keyboard#styles#ToggleVerbatimg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strikeout) :set opfunc=pandoc#keyboard#styles#ToggleStrikeoutg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-superscript) :set opfunc=pandoc#keyboard#styles#ToggleSuperscriptg@
nnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-subscript) :set opfunc=pandoc#keyboard#styles#ToggleSubscriptg@
noremap <buffer> <silent> <Plug>RDSendLine :call SendLineToR("down")0
vnoremap <buffer> <silent> <Plug>RDSendSelection :call SendSelectionToR("silent", "down")
nnoremap <buffer> <silent> <Plug>(pandoc-hypertext-goto-id) :call pandoc#hypertext#GotoID()
nnoremap <buffer> <silent> <Plug>(pandoc-hypertext-open-system) :call pandoc#hypertext#OpenSystem()
nnoremap <buffer> <silent> <Plug>(pandoc-hypertext-open-local) :call pandoc#hypertext#OpenLocal()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ref-backfrom) :call pandoc#keyboard#references#BACKFROM_Ref()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ref-goto) :call pandoc#keyboard#references#GOTO_Ref()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ref-insert) :call pandoc#keyboard#references#Insert_Ref()a
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-subscript-exclusive) :call pandoc#keyboard#styles#SelectSubscript("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-subscript-inclusive) :call pandoc#keyboard#styles#SelectSubscript("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-subscript) :call pandoc#keyboard#styles#ToggleSubscript(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-subscript) :set opfunc=pandoc#keyboard#styles#ToggleSubscriptg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-superscript-exclusive) :call pandoc#keyboard#styles#SelectSuperscript("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-superscript-inclusive) :call pandoc#keyboard#styles#SelectSuperscript("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-superscript) :call pandoc#keyboard#styles#ToggleSuperscript(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-superscript) :set opfunc=pandoc#keyboard#styles#ToggleSuperscriptg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strikeout-exclusive) :call pandoc#keyboard#styles#SelectStrikeout("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strikeout-inclusive) :call pandoc#keyboard#styles#SelectStrikeout("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strikeout) :call pandoc#keyboard#styles#ToggleStrikeout(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strikeout) :set opfunc=pandoc#keyboard#styles#ToggleStrikeoutg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-verbatim-exclusive) :call pandoc#keyboard#styles#SelectVerbatim("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-verbatim-inclusive) :call pandoc#keyboard#styles#SelectVerbatim("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-verbatim) :call pandoc#keyboard#styles#ToggleVerbatim(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-verbatim) :set opfunc=pandoc#keyboard#styles#ToggleVerbatimg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strong-exclusive) :call pandoc#keyboard#styles#SelectStrong("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-strong-inclusive) :call pandoc#keyboard#styles#SelectStrong("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strong) :call pandoc#keyboard#styles#ToggleStrong(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-strong) :set opfunc=pandoc#keyboard#styles#ToggleStrongg@
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-emphasis-exclusive) :call pandoc#keyboard#styles#SelectEmphasis("exclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-emphasis-inclusive) :call pandoc#keyboard#styles#SelectEmphasis("inclusive")
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-emphasis) :call pandoc#keyboard#styles#ToggleEmphasis(visualmode())
onoremap <buffer> <silent> <Plug>(pandoc-keyboard-toggle-emphasis) :set opfunc=pandoc#keyboard#styles#ToggleEmphasisg@
noremap <buffer> <silent> <Plug>(pandoc-keyboard-nth-header-child) :call pandoc#keyboard#sections#GotoNthChildHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-last-header-child) :call pandoc#keyboard#sections#LastChildHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-first-header-child) :call pandoc#keyboard#sections#FirstChildHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-header-sibling) :call pandoc#keyboard#sections#PrevSiblingHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-header-sibling) :call pandoc#keyboard#sections#NextSiblingHeader()
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-section-exclusive) :call pandoc#keyboard#sections#SelectSection('exclusive')
vnoremap <buffer> <silent> <Plug>(pandoc-keyboard-select-section-inclusive) :call pandoc#keyboard#sections#SelectSection('inclusive')
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-header-parent) :call pandoc#keyboard#sections#CurrentHeaderParent()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-header) :call pandoc#keyboard#sections#CurrentHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-rw-sect-end) :call pandoc#keyboard#sections#PrevSectionEnd(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ff-sect-end) :call pandoc#keyboard#sections#NextSectionEnd(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-rw-header) :call pandoc#keyboard#sections#BackwardHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-ff-header) :call pandoc#keyboard#sections#ForwardHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-header) :call pandoc#keyboard#sections#PrevHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-header) :call pandoc#keyboard#sections#NextHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-remove-header) :call pandoc#keyboard#sections#RemoveHeader()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-apply-header) :call pandoc#keyboard#sections#ApplyHeader(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-nth-li-child) :call pandoc#keyboard#lists#GotoNthListItemChild(v:count1)
noremap <buffer> <silent> <Plug>(pandoc-keyboard-last-li-child) :call pandoc#keyboard#lists#LastListItemChild()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-first-li-child) :call pandoc#keyboard#lists#FirstListItemChild()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-li-sibling) :call pandoc#keyboard#lists#PrevListItemSibling()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-li-sibling) :call pandoc#keyboard#lists#NextListItemSibling()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-li-parent) :call pandoc#keyboard#lists#CurrentListItemParent()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-cur-li) :call pandoc#keyboard#lists#CurrentListItem()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-prev-li) :call pandoc#keyboard#lists#PrevListItem()
noremap <buffer> <silent> <Plug>(pandoc-keyboard-next-li) :call pandoc#keyboard#lists#NextListItem()
imap <buffer> <silent>  =RCompleteArgs()
inoremap <buffer> <silent> ,ca :call b:SendChunkToR("echo", "down")a
inoremap <buffer> <silent> ,cd :call b:SendChunkToR("silent", "down")a
inoremap <buffer> <silent> ,ce :call b:SendChunkToR("echo", "stay")a
inoremap <buffer> <silent> ,cc :call b:SendChunkToR("silent", "stay")a
inoremap <buffer> <silent> ,ko :call RMakeHTMLrmd("odt")a
inoremap <buffer> <silent> ,sl :call RMakeSlidesrmd()a
inoremap <buffer> <silent> ,kh :call RMakeHTMLrmd("html")a
inoremap <buffer> <silent> ,kl :call RMakePDFrmd("beamer")a
inoremap <buffer> <silent> ,kp :call RMakePDFrmd("latex")a
inoremap <buffer> <silent> ,kn :call RKnit()a
inoremap <buffer> <silent> ,rd :call RSetWD()a
inoremap <buffer> <silent> ,r- :call g:RBrOpenCloseLs(0)a
inoremap <buffer> <silent> ,r= :call g:RBrOpenCloseLs(1)a
inoremap <buffer> <silent> ,ro :call RObjBrowser()a
inoremap <buffer> <silent> ,rb :call RAction("plotsumm")a
inoremap <buffer> <silent> ,rg :call RAction("plot")a
inoremap <buffer> <silent> ,rs :call RAction("summary")a
inoremap <buffer> <silent> ,rh :call RAction("help")a
inoremap <buffer> <silent> ,re :call RAction("example")a
inoremap <buffer> <silent> ,ra :call RAction("args")a
inoremap <buffer> <silent> ,rt :call RAction("str")a
inoremap <buffer> <silent> ,rn :call RAction("vim.names")a
inoremap <buffer> <silent> ,rp :call RAction("print")a
inoremap <buffer> <silent> ,rm :call RClearAll()a
inoremap <buffer> <silent> ,rr :call RClearConsole()a
inoremap <buffer> <silent> ,rl :call g:SendCmdToR("ls()")a
imap <buffer> <silent> ,r<Right> l:call RSendPartOfLine("right", 0)i
imap <buffer> <silent> ,r<Left> l:call RSendPartOfLine("left", 0)i
inoremap <buffer> <silent> ,q :call SendLineToR("newline")a
inoremap <buffer> <silent> ,o :call SendLineToRAndInsertOutput()0i
inoremap <buffer> <silent> ,d :call SendLineToR("down")0i
inoremap <buffer> <silent> ,l :call SendLineToR("stay")a
inoremap <buffer> <silent> ,ch :call SendFHChunkToR()a
inoremap <buffer> <silent> ,pa :call SendParagraphToR("echo", "down")a
inoremap <buffer> <silent> ,pd :call SendParagraphToR("silent", "down")a
inoremap <buffer> <silent> ,pe :call SendParagraphToR("echo", "stay")a
inoremap <buffer> <silent> ,pp :call SendParagraphToR("silent", "stay")a
inoremap <buffer> <silent> ,fa :call SendFunctionToR("echo", "down")a
inoremap <buffer> <silent> ,fd :call SendFunctionToR("silent", "down")a
inoremap <buffer> <silent> ,fe :call SendFunctionToR("echo", "stay")a
inoremap <buffer> <silent> ,ff :call SendFunctionToR("silent", "stay")a
inoremap <buffer> <silent> ,ba :call SendMBlockToR("echo", "down")a
inoremap <buffer> <silent> ,bd :call SendMBlockToR("silent", "down")a
inoremap <buffer> <silent> ,be :call SendMBlockToR("echo", "stay")a
inoremap <buffer> <silent> ,bb :call SendMBlockToR("silent", "stay")a
inoremap <buffer> <silent> ,; :call MovePosRCodeComment("normal")a
inoremap <buffer> <silent> ,xu :call RSimpleCommentLine("normal", "u")a
inoremap <buffer> <silent> ,xc :call RSimpleCommentLine("normal", "c")a
inoremap <buffer> <silent> ,xx :call RComment("normal")a
inoremap <buffer> <silent> ,rw :call RQuit('save')a
inoremap <buffer> <silent> ,rq :call RQuit('nosave')a
inoremap <buffer> <silent> ,rc :call StartR("custom")a
inoremap <buffer> <silent> ,rv :call StartR("vanilla")a
inoremap <buffer> <silent> ,rf :call StartR("R")a
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=2
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=pandoc\ -t\ markdown\ --reference-links\ --no-wrap
setlocal errorformat=
setlocal expandtab
if &filetype != 'pandoc'
setlocal filetype=pandoc
endif
set foldcolumn=6
setlocal foldcolumn=3
setlocal foldenable
setlocal foldexpr=pandoc#folding#FoldExpr()
setlocal foldignore=#
setlocal foldlevel=1
setlocal foldmarker={{{,}}}
set foldmethod=marker
setlocal foldmethod=expr
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=pandoc#folding#FoldText()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetRmdIndent()
setlocal indentkeys=0{,0},:,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=48-57,a-z,A-Z,192-255
setlocal keywordprg=
setlocal linebreak
setlocal nolisp
set list
setlocal list
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=pandoc#completion#Complete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal spell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%{lightline#link()}%#LightLineLeft_inactive_0#%(\ %t\ %)%#LightLineLeft_inactive_0_1#â–¶%#LightLineMiddle_inactive#%=%#LightLineRight_inactive_1_2#â–¶%#LightLineRight_inactive_1#%(\ %3p%%\ %)%#LightLineRight_inactive_0_1#â–¶%#LightLineRight_inactive_0#%(\ %3l:%-2v\ %)
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'pandoc'
setlocal syntax=pandoc
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
let s:l = 1 - ((0 * winheight(0) + 15) / 30)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
lcd ~/Documents/data_intensive/book/ch6_reconstruction
wincmd w
4wincmd w
exe '1resize ' . ((&lines * 14 + 23) / 47)
exe 'vert 1resize ' . ((&columns * 48 + 97) / 194)
exe '2resize ' . ((&lines * 14 + 23) / 47)
exe 'vert 2resize ' . ((&columns * 48 + 97) / 194)
exe '3resize ' . ((&lines * 15 + 23) / 47)
exe 'vert 3resize ' . ((&columns * 48 + 97) / 194)
exe '4resize ' . ((&lines * 22 + 23) / 47)
exe 'vert 4resize ' . ((&columns * 48 + 97) / 194)
exe '5resize ' . ((&lines * 22 + 23) / 47)
exe 'vert 5resize ' . ((&columns * 48 + 97) / 194)
exe '6resize ' . ((&lines * 14 + 23) / 47)
exe 'vert 6resize ' . ((&columns * 48 + 97) / 194)
exe '7resize ' . ((&lines * 14 + 23) / 47)
exe 'vert 7resize ' . ((&columns * 47 + 97) / 194)
exe '8resize ' . ((&lines * 30 + 23) / 47)
exe 'vert 8resize ' . ((&columns * 96 + 97) / 194)
tabnext 1
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToO
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
